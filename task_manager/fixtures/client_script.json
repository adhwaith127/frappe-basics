[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-01-21 18:01:54.121949",
  "module": "sil",
  "name": "Update Slip Number",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    \n  //to fix Slip Nos disappear On Save.This helps to make it stay on the field. \n    after_save: function(frm) {\n        if (frm.doc.custom_slip_no) {\n            // Add the value to options if it's missing\n            let field = frm.fields_dict['custom_slip_no'];\n            if (!field.df.options.includes(frm.doc.custom_slip_no)) {\n                field.df.options += `\\n${frm.doc.custom_slip_no}`;\n                field.refresh();\n            }\n            // Set the value\n            frm.set_value('custom_slip_no', frm.doc.custom_slip_no);\n            frm.refresh_field('custom_slip_no');\n        }\n    },\n\n    refresh: function(frm) {\n        // Attach click event to custom new slip button\n        frm.fields_dict['custom_new_slip'].input.onclick = () => {\n            open_slip_number_dialog(frm);\n        };\n                $(document).ready(function() {\n            // Listen for changes or clicks on the label for 'Rounded Total (INR)'\n            $('label.control-label:contains(\"Rounded Total (INR)\")').each(function() {\n                const label = $(this);\n                const relatedField = label.closest('.form-group').find('input, .control-value'); // Find the related field\n                \n                // Using MutationObserver to detect changes to the field content\n                const observer = new MutationObserver(function(mutations) {\n                    mutations.forEach(function(mutation) {\n                        if (mutation.type === 'childList' || mutation.type === 'characterData') {\n                            console.log(\"Value changed for Rounded Total (INR) field!\");\n                            update_allocated_amount(frm);\n                        }\n                    });\n                });\n\n                // Observe for changes in the related field's content\n                const config = { childList: true, characterData: true, subtree: true };\n                if (relatedField.length > 0) {\n                    observer.observe(relatedField[0], config);\n                }\n            });\n        });\n    \n\n        // Load slip numbers on refresh\n        load_slip_numbers(frm);\n    },\n\n    customer: function(frm) {\n        // Load slip numbers when customer changes\n        load_slip_numbers(frm);\n        frm.set_value('custom_slip_no', ''); // Clear the field when customer changes\n    },\n\n    custom_slip_no: function(frm) {\n        if (!frm.doc.custom_slip_no) return;\n\n        // Clear existing advances\n        frm.clear_table('advances');\n\n        frappe.call({\n            method: 'sil.services.payment_entry_api.get_payment_entry_by_slip',\n            args: {\n                slip_no: frm.doc.custom_slip_no\n            },\n            callback: function(r) {\n                if (r.message && r.message.length) {\n                    r.message.forEach(entry => {\n                        let row = frm.add_child('advances');\n                        row.reference_type = 'Payment Entry';\n                        row.reference_name = entry.NAME;\n                        row.advance_amount = entry.paid_amount;\n                        row.remarks = entry.remarks;\n                        row.custom_slip_no = entry.custom_slip_no;\n                    });\n\n                    frm.refresh_field('advances');\n                    update_allocated_amount(frm);\n\n                    frappe.show_alert({\n                        message: __('Advanced payments loaded from slip number'),\n                        indicator: 'green'\n                    });\n                } else {\n                    frappe.show_alert({\n                        message: __('No payment entries found for this slip number'),\n                        indicator: 'orange'\n                    });\n                }\n            }\n        });\n    }\n});\n\n// Function to update allocated amount for each row in 'advances'\nfunction update_allocated_amount(frm) {\n    if (!frm.doc.advances || !frm.doc.advances.length) return;\n\n    let total_allocated = 0;\n\n    frm.doc.advances.forEach(row => {\n        if (frm.doc.rounded_total >= (total_allocated + row.advance_amount)) {\n            row.allocated_amount = row.advance_amount;\n        } else {\n            let remaining = frm.doc.rounded_total - total_allocated;\n            row.allocated_amount = remaining > 0 ? remaining : 0;\n        }\n        total_allocated += row.allocated_amount;\n    });\n\n    frm.refresh_field('advances');\n    frm.trigger('form_render');\n}\n\n// Function to load slip numbers based on customer\nfunction load_slip_numbers(frm) {\n    frappe.call({\n        method: 'sil.services.payment_entry_api.get_custom_slip_nos',\n        args: {\n            filters: frm.doc.customer ? { 'party': frm.doc.customer } : {}\n        },\n        callback: function(r) {\n            if (r.message) {\n                let field = frm.fields_dict['custom_slip_no'];\n                let slip_numbers = r.message;\n\n                // Add the current value to options if missing\n                const current_value = frm.doc.custom_slip_no;\n                if (current_value && !slip_numbers.includes(current_value)) {\n                    slip_numbers.push(current_value);\n                }\n\n                // Set options as an array instead of string\n                field.df.options = slip_numbers;\n                field.refresh();\n            }\n        }\n    });\n}\n\n// Dialog to enter slip number\nfunction open_slip_number_dialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: 'Enter Slip Number',\n        fields: [\n            {\n                label: 'Slip Number',\n                fieldname: 'slip_number',\n                fieldtype: 'Data',\n                reqd: 1,\n                onchange: function() {\n                    // Reset field styling\n                    const field = dialog.get_field('slip_number');\n                    field.$input.css('border-color', '');\n                    field.$input.css('background-color', '');\n                }\n            }\n        ],\n        primary_action_label: 'Submit',\n        primary_action(values) {\n            if (!values.slip_number) {\n                frappe.msgprint({\n                    title: 'Error',\n                    message: 'Please enter a slip number',\n                    indicator: 'red'\n                });\n                return;\n            }\n\n            // Check if slip number exists in Payment Entries\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Payment Entry',\n                    filters: { custom_slip_no: values.slip_number },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        const field = dialog.get_field('slip_number');\n                        field.$input.css({ 'border-color': 'red', 'background-color': '#fff0f0' });\n                        frappe.msgprint({\n                            title: 'Error',\n                            message: 'This slip number already exists in Payment Entry.',\n                            indicator: 'red'\n                        });\n                    } else {\n                        // Check if slip number exists in Sales Invoice\n                        frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Sales Invoice',\n                                filters: {\n                                    custom_slip_no: values.slip_number,\n                                    docstatus: 1\n                                },\n                                fields: ['name']\n                            },\n                            callback: function(r2) {\n                                if (r2.message && r2.message.length > 0) {\n                                    const field = dialog.get_field('slip_number');\n                                    field.$input.css({ 'border-color': 'red', 'background-color': '#fff0f0' });\n                                    frappe.msgprint({\n                                        title: 'Error',\n                                        message: 'This slip number already exists in Sales Invoice.',\n                                        indicator: 'red'\n                                    });\n                                } else {\n                                    // Check if slip number exists in Journal Entry Account\n                                    frappe.call({\n                                        method: 'sil.services.payment_entry_api.check_slip_duplicate',\n                                        args: {\n                                            slip_no: values.slip_number\n                                            },\n                                        callback: function(r3) {\n                                            if (r3.message && r3.message.length > 0) {\n                                                const field = dialog.get_field('slip_number');\n                                                field.$input.css({ 'border-color': 'red', 'background-color': '#fff0f0' });\n                                                frappe.msgprint({\n                                                    title: 'Error',\n                                                    message: 'This slip number already exists in Journal Entry Account.',\n                                                    indicator: 'red'\n                                                });\n                                            } else {\n                                                // Add slip number to options and set value\n                                                if (!frm.fields_dict.custom_slip_no.df.options.includes(values.slip_number)) {\n                                                    frm.fields_dict.custom_slip_no.df.options = [values.slip_number];\n                                                    frm.fields_dict.custom_slip_no.refresh();\n                                                }\n                                                frm.set_value('custom_slip_no', values.slip_number);\n                                                dialog.hide();\n\n                                                frappe.show_alert({\n                                                    message: `Slip number ${values.slip_number} has been set successfully.`,\n                                                    indicator: 'green'\n                                                }, 3);\n                                            }\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Attendance",
  "enabled": 1,
  "modified": "2024-12-06 10:36:24.468087",
  "module": "sil",
  "name": "Export Employee Attendance",
  "script": "frappe.listview_settings['Attendance'] = {\n    onload: function(listview) {\n        // Add a custom button to the Attendance list view toolbar\n        listview.page.add_inner_button(__('Export Check-in Report'), function() {\n            open_filter_dialog();\n        });\n    }\n};\n\nfunction open_filter_dialog() {\n    // Create a dialog with employee, from date, and to date fields\n    let dialog = new frappe.ui.Dialog({\n        title: 'Filter for Check-in Report',\n        fields: [\n            {\n                label: 'All Employees',\n                fieldname: 'all_employees',\n                fieldtype: 'Check',\n                default: 0,  // Default to unchecked\n                reqd: 0  // Optional\n            },\n            {\n                label: 'Employee',\n                fieldname: 'employee',\n                fieldtype: 'Link',\n                options: 'Employee',\n                reqd: 0,  // Optional\n                depends_on: 'eval:!doc.all_employees',\n                mandatory_depends_on: 'eval:!doc.all_employees'\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                label: 'From Date',\n                fieldname: 'from_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            },\n            {\n                label: 'To Date',\n                fieldname: 'to_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            }\n        ],\n        primary_action_label: 'Generate Report',\n        primary_action(values) {\n            // Ensure valid input\n            if (!values.from_date || !values.to_date) {\n                frappe.msgprint(__('Please fill all required fields.'));\n                return;\n            }\n\n            if (values.to_date < values.from_date) {\n                frappe.msgprint(__('To Date cannot be earlier than From Date.'));\n                return;\n            }\n\n            if (values.all_employees) {\n                values.employee = '';  // Clear employee if all employees are selected\n            }\n\n            // Show a progress dialog\n            let progress_dialog = frappe.msgprint({\n                message: __('Generating report, please wait...'),\n                indicator: 'blue',\n                title: __('Processing')\n            });\n\n            // Call the server-side function to generate the report\n            frappe.call({\n                method: 'sil.services.checkin_report_api.get_combined_checkin_report_to_hr',\n                args: {\n                    employee_name: values.employee || '',\n                    from_date: values.from_date,\n                    to_date: values.to_date\n                },\n                callback: function(response) {\n                    // Hide the progress dialog\n                    progress_dialog.hide();\n\n                    if (response.message && response.message.file_url) {\n                        // Hide the progress dialog in case of an error\n                        progress_dialog.hide();\n                        \n                        const fileUrl = response.message.file_url;\n                        const link = document.createElement('a');\n                        link.href = fileUrl;\n                        link.download = response.message.file_name || 'Checkin_Report.xlsx';\n                        link.click();\n\n                        frappe.msgprint({\n                            title: __('Success'),\n                            indicator: 'green',\n                            message: __('Check-in report successfully downloaded.')\n                        });\n                        progress_dialog.hide();\n                    } else {\n                        // Hide the progress dialog in case of an error\n                        progress_dialog.hide();\n                        frappe.msgprint({\n                            title: __('Error'),\n                            indicator: 'red',\n                            message: __('Error: {0}', [response.message.error || 'Unknown error'])\n                        });\n                        progress_dialog.hide();\n                    }\n                },\n                error: function(error) {\n                    // Hide the progress dialog in case of an error\n                    progress_dialog.hide();\n\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: __('Server error occurred while generating the report.')\n                    });\n                    console.error('Server error:', error);\n                }\n            });\n\n            dialog.hide();  // Hide the filter dialog\n        }\n    });\n\n    dialog.show();  // Show the filter dialog\n}\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-12-17 12:39:34.254594",
  "module": "sil",
  "name": "Export Sales Invoice Reports",
  "script": "frappe.listview_settings['Sales Invoice'] = {\n    onload: function(listview) {\n        listview.page.add_inner_button(__('Export Report'), function() {\n            open_download_dialog();\n        });\n    }\n};\n\nfunction open_download_dialog() {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Download Sales Invoice Report'),\n        width: '800px',\n        height: '300px',\n        fields: [\n            {\n                fieldtype: 'Section Break',\n                label: __('Date Filters'),\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'starting_posting_date',\n                label: __('From Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                columns: 3,\n                description: __('Select the start date for the report.')\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'ending_posting_date',\n                label: __('To Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                columns: 3,\n                description: __('Select the end date for the report.')\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'customer_name',\n                label: __('Customer Name'),\n                options: 'Customer',\n                reqd: 0,\n                columns: 3,\n                description: __('Select the Customer for the report.')\n            },\n            {\n                fieldtype: 'Section Break',\n                label: __('Manager Filters'),\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_zonal_manager',\n                label: __('Zonal Manager'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('(Select the Zonal Manager for the report.)')\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_regional_manager',\n                label: __('Regional Manager'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('(Select the Regional Manager for the report.)')\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_cluster',\n                label: __('Cluster'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('(Select the Cluster for the report.)')\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_cluster_manager',\n                label: __('Cluster Manager'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('Select the Cluster Manager for the report.')\n            }\n        ],\n        primary_action_label: __('Download'),\n        primary_action(values) {\n            if (values.starting_posting_date > values.ending_posting_date) {\n                frappe.msgprint(__('Error: From Date cannot be later than To Date.'));\n                return;\n            }\n\n            frappe.call({\n                method: 'sil.services.sales_invoice_report_api.generate_and_download_sales_invoice_report',\n                args: {\n                    filters: values\n                },\n                callback: function(response) {\n                    if (response.message && response.message.file_url) {\n                        const link = document.createElement('a');\n                        link.href = response.message.file_url;\n                        link.download = response.message.file_name || 'sales_invoice_report.xlsx';\n                        link.click();\n                    } else {\n                        frappe.msgprint(__('Error: {0}', [response.message.error || 'Unknown error']));\n                    }\n                },\n                error: function(err) {\n                    frappe.msgprint(__('An unexpected error occurred. Please try again.'));\n                    console.error(err);\n                }\n            });\n\n            dialog.hide();\n        }\n    });\n\n    // Fetch filter data from the server\n    frappe.call({\n        method: 'sil.services.sales_invoice_api.get_distinct_sales_invoice_filters',\n        callback: function(response) {\n            const data = response.message || [];\n            \n            // Populate options dynamically\n            dialog.set_df_property('custom_zonal_manager', 'options', [''].concat([...new Set(data.map(item => item.custom_zonal_manager))]));\n            dialog.set_df_property('custom_regional_manager', 'options', [''].concat([...new Set(data.map(item => item.custom_regional_manager))]));\n            dialog.set_df_property('custom_cluster', 'options', [''].concat([...new Set(data.map(item => item.custom_cluster))]));\n            dialog.set_df_property('custom_cluster_manager', 'options', [''].concat([...new Set(data.map(item => item.custom_cluster_manager))]));\n            \n            dialog.refresh();\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-10-25 10:17:08.775479",
  "module": "sil",
  "name": "Sales Order Item Filter",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    custom_sales_type : function(frm) {\r\n        frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\r\n            let row = locals[cdt][cdn];\r\n            let filters = {};\r\n\r\n            if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\" || frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Finished Software\", \"Finished Products\",\"Miscellaneous\",\"Both Sales and Spare\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\" || frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Raw Materials and Spares\",\"License\",\"Miscellaneous\",\"Both Sales and Spare\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\" || frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": \"Annual Maintenance\"\r\n                };\r\n            } else {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Annual Maintenance\", \"Miscellaneous\",\"Both Sales and Spare\",\"Raw Materials and Spares\", \"Finished Software\", \"Finished Products\"]]\r\n                };\r\n            }\r\n\r\n            return {\r\n                filters: filters\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-10-25 10:16:57.401483",
  "module": "sil",
  "name": "Sales Invoice Item Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    custom_sales_type : function(frm) {\r\n        frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\r\n            let row = locals[cdt][cdn];\r\n            let filters = {};\r\n\r\n            if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\" || frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Finished Software\", \"Finished Products\",\"Both Sales and Spare\",\"Miscellaneous\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\" || frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Raw Materials and Spares\",\"Both Sales and Spare\",\"Miscellaneous\",\"License\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\" || frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": \"Annual Maintenance\"\r\n                };\r\n            } else {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Annual Maintenance\", \"Miscellaneous\",\"Both Sales and Spare\", \"Raw Materials and Spares\", \"Finished Software\", \"Finished Products\"]]\r\n                };\r\n            }\r\n\r\n            return {\r\n                filters: filters\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:19:15.526107",
  "module": "sil",
  "name": "Cluster Filter With State SO",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_state: function(frm) {\n    frm.set_query(\"custom_cluster\", function() {\n            return {\n                \"filters\": {\n                    \"stateprovince\": frm.doc.custom_state,\n                   \n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-08-12 11:19:59.654482",
  "module": "sil",
  "name": "Cluster Filter With State SI",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_state_province: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state_province ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state_province) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state_province);\n\n            frappe.call({\n                method: \"sil.services.cluster_api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state_province\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state_province]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state_province]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state_province]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-10-25 10:18:40.388334",
  "module": "sil",
  "name": "Sales Invoice Sales Type Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    billing_address_gstin: function(frm) {\r\n        if (frm.doc.billing_address_gstin) {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2B PRODUCT INDIA',\r\n                'B2B SPARES INDIA',\r\n                'B2B CONSUMABLES INDIA',\r\n                'B2B AMC INDIA',\r\n                'SALES INTERNATIONAL',\r\n                'AMAZON SALES',\r\n                'B2B DELHI OFC'\r\n            ]);\r\n        } else {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2C PRODUCT INDIA',\r\n                'B2C SPARES INDIA',\r\n                'B2C CONSUMABLES INDIA',\r\n                'SALES INTERNATIONAL',\r\n                'B2C AMC INDIA',\r\n                'B2C DELHI OFC'\r\n            ]);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-10-25 10:18:10.305330",
  "module": "sil",
  "name": "Sales Order Sales Type filter",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    billing_address_gstin: function(frm) {\r\n        if (frm.doc.billing_address_gstin) {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2B PRODUCT INDIA',\r\n                'B2B SPARES INDIA',\r\n                'B2B CONSUMABLES INDIA',\r\n                'B2B AMC INDIA',\r\n                'SALES INTERNATIONAL',\r\n                'AMAZON SALES',\r\n                'B2B DELHI OFC'\r\n            ]);\r\n        } else {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2C PRODUCT INDIA',\r\n                'B2C SPARES INDIA',\r\n                'B2C CONSUMABLES INDIA',\r\n                'B2C AMC INDIA',\r\n                'B2C DELHI OFC'\r\n            ]);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-09-26 10:37:08.251192",
  "module": "sil",
  "name": "Sales order Button Click",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    custom_create_serial_no: function(frm) {\r\n        customCreateSerialNo(frm);\r\n    }\r\n});\r\n\r\nfunction customCreateSerialNo(frm) {\r\n    let items_series_data = {};\r\n\r\n    // Gathering data from custom item series\r\n    frm.doc.custom_item_series.forEach(function(item_series, index) {\r\n        items_series_data[index] = {\r\n            \"customer\": frm.doc.customer,\r\n            \"sales_order_name\": frm.doc.name,\r\n            \"item_name\":item_series.item_name,\r\n            \"item_code\": item_series.item_code,\r\n            \"item_family\": item_series.item_family,\r\n            \"quantity\": item_series.quantity,\r\n            \"item_series\": item_series.item_series,\r\n            \"serial_nos\": item_series.serial_no || \"\"\r\n        };\r\n    });\r\n\r\n    // Show progress dialog\r\n    let progress_dialog = frappe.msgprint({\r\n        message: __('Processing items...'),\r\n        indicator: 'blue',\r\n        title: __('Please Wait'),\r\n        wide: true,\r\n        buttons: []\r\n    });\r\n\r\n    let total_items = Object.keys(items_series_data).length;\r\n    let processed_items = 0;\r\n\r\n    // Iterate over item series data and call method to create serial numbers\r\n    Object.keys(items_series_data).forEach(function(key) {\r\n        let item_series = items_series_data[key];\r\n        \r\n        frappe.call({\r\n            method: \"sil.services.sales_order_api.generateSerialNo\", // Replace with your method path\r\n            args: {\r\n                items_series: JSON.stringify({ [key]: item_series }), // Passing data as JSON\r\n                form_doc: frm.doc.name // Send form doc if necessary\r\n            },\r\n            callback: function(response) {\r\n                console.log('Response received:', response);\r\n\r\n                // Check for success response\r\n                if (response.message && response.message.success) {\r\n                    // Access serial numbers using the key\r\n                    let serial_data = response.message.serial_nos[key]; \r\n                    if (serial_data) {\r\n                        let item = frm.doc.custom_item_series.find(i => i.item_code === item_series.item_code);\r\n                        if (item) {\r\n                            // Update the 'serial_no' field with the serial_Nos from the response\r\n                            frappe.model.set_value(item.doctype, item.name, 'serial_no', serial_data.serial_Nos);\r\n                            console.log('Serial Nos updated for item:', item_series.item_code, 'Serial Nos:', serial_data.serial_Nos);\r\n                        }\r\n                    }\r\n                    frappe.msgprint(\"Serial No created successfully for item: \" + item_series.item_code);\r\n                } else {\r\n                    frappe.msgprint(\"Serial No creation failed for item: \" + item_series.item_code + \" - \" + (response.message.message || 'Unknown error'));\r\n                }\r\n\r\n                frm.refresh_field('custom_item_series');\r\n\r\n                // Track processed items\r\n                processed_items += 1;\r\n\r\n                // Hide progress dialog when all items are processed\r\n                if (processed_items === total_items) {\r\n                    progress_dialog.hide();\r\n                }\r\n            },\r\n            error: function(error) {\r\n                console.error('Error processing item:', item_series.item_code, 'Error:', error);\r\n                processed_items += 1;\r\n                frappe.msgprint(\"Error processing item: \" + item_series.item_code);\r\n\r\n                if (processed_items === total_items) {\r\n                    progress_dialog.hide();\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cluster Manager",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.753122",
  "module": "sil",
  "name": "Cluster Managers filter",
  "script": "frappe.ui.form.on('Cluster Managers', {\n    refresh: function(frm) {\n        frm.set_query(\"parent_cluster\", function() {\n            return {\n                \"filters\": {\n                    \"workflow_state\": \"Approved\"  // Filters parent clusters with status 'Submitted'\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.731470",
  "module": "sil",
  "name": "Invoice Billing Series Name",
  "script": "frappe.ui.form.on('Sales Invoice', {\n     refresh: function(frm) {\n        frm.trigger('update_naming_series');\n    },\n    custom_sales_type: function(frm) {\n        frm.trigger('update_naming_series');\n    },\n    update_naming_series: function(frm) {\n        if (frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2B CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2C CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/A./\");\n        } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/A./\");\n        } else if (frm.doc.custom_sales_type === \"SALES INTERNATIONAL\") {\n            frm.set_value('naming_series', \"SI24I25/F./\");\n\t\t} else if (frm.doc.custom_sales_type === \"AMAZON SALES\") {\n            frm.set_value('naming_series', \"IN.-.###./.24-25\");\n\t\t} else if (frm.doc.custom_sales_type === \"B2B DELHI OFC\") {\n            frm.set_value('naming_series', \"SID24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C DELHI OFC\") {\n            frm.set_value('naming_series', \"SID24C25/I./\");\n        } else {\n            frm.set_value('naming_series', \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.709936",
  "module": "sil",
  "name": "Salesorder Billing series",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_sales_type: function(frm) {\n        // Update the naming_series field based on custom_sales_type field\n        if (frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2B CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2C CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/A./\");\n        } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/A./\");\n        } else if (frm.doc.custom_sales_type === \"SALES INTERNATIONAL\") {\n            frm.set_value('naming_series', \"SO24I25/F./\");\n        }  else if (frm.doc.custom_sales_type === \"AMAZON SALES\") {\n            frm.set_value('naming_series', \"INSO-.FY./\");\n\t\t} else if (frm.doc.custom_sales_type === \"B2B DELHI OFC\") {\n            frm.set_value('naming_series', \"SOD24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C DELHI OFC\") {\n            frm.set_value('naming_series', \"SOD24C25/I./\");\n        } else {\n            frm.set_value('naming_series', \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.690094",
  "module": "sil",
  "name": "Filter Employes",
  "script": "frappe.ui.form.on('Issue', {\n    custom_item_classification: function(frm) {\n\tif (frm.doc.custom_item_classification == \"Finished Software\")\n        frm.set_query(\"custom_attended_by_\", function() {\n            return {\n                \"filters\": {\n                    \"department\": \"Projects And Technical Solutions - SIL\",                    \n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.314574",
  "module": "sil",
  "name": "Sales Table Series No",
  "script": "frappe.ui.form.on('Sales Order', {\n        refresh: function(frm) {\n            if (frm.doc.custom_approval_status === \"Customer Support Approved\") {\n                if (frm.doc.custom_validation_check != 1) {\n                    \n                    frm.set_value(\"custom_validation_check\", 1);\n    \n                    frm.doc.items.forEach(function(row) {\n                        let item_series = frm.add_child('custom_item_series');\n                        item_series.item_code = row.item_code;\n                        item_series.item_name = row.item_name;\n                        item_series.item_family = row.custom_item_family;\n                        item_series.quantity = row.qty;\n                    });\n                    \n                    frm.refresh_field('custom_item_series');\n                }\n            }\n        }\n    });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.664270",
  "module": "sil",
  "name": "Item filter with the help of item classification",
  "script": "frappe.ui.form.on('Issue', {\n    custom_item_group: function(frm) {\n        frm.set_query(\"custom_items\", function() {\n            return {\n                \"filters\": {\n                    \"item_group\": frm.doc.custom_item_group,\n                    \"custom_item_classification\": frm.doc.custom_item_classification\n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.641871",
  "module": "sil",
  "name": "Sales order Committed Date",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    posting_date(frm) {\n        frm.set_value(\"custom_expiry_date\", frappe.datetime.add_days(frm.doc.transaction_date, 365));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Type",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.616006",
  "module": "sil",
  "name": "Item load with help of Item group",
  "script": "frappe.ui.form.on('Issue Type', {\n    custom_item_group: function(frm) {\n        frm.set_query(\"custom_item\", function() {\n            return {\n                \"filters\": {\n                    \"item_group\": frm.doc.custom_item_group\n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:22:21.681774",
  "module": "sil",
  "name": "Ware house sales order",
  "script": "frappe.ui.form.on('Sales Order', {\nrefresh(frm) {\n    frappe.ui.keys.add_shortcut({\n        shortcut: 'f2',\n        action: async () => {\n            try {\n                const itemResponse = await frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Item',\n                        fields: ['name', 'item_code', 'item_name', 'item_group', 'stock_uom', 'description', 'last_purchase_rate']\n                    }\n                });\n\n                if (itemResponse && itemResponse.message && itemResponse.message.length > 0) {\n                    const itemDetails = itemResponse.message;\n                    const d = new frappe.ui.Dialog({\n                        title: __('Item Details'),\n                        size: 'large'\n                    });\n\n                    let itemInfoHtml = `\n                        <div class=\"modal-body\">\n                            <table class=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>Item Code</th>\n                                        <th>Item Name</th>\n                                        <th>Item Group</th>\n                                        <th>Stock UOM</th>\n                                        <th>Description</th>\n                                        <th>Last Purchase Rate</th>\n                                        <th>Warehouse</th>\n                                        <th>Stock Quantity</th>\n                                    </tr>\n                                </thead>\n                                <tbody>`;\n\n                    // Loop through each item\n                    for (const item of itemDetails) {\n                        const binResponse = await frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Bin',\n                                filters: { item_code: item.item_code },\n                                fields: ['warehouse', 'actual_qty']\n                            }\n                        });\n\n                        let warehouseHtml = '';\n                        let stockQtyHtml = '';\n\n                        if (binResponse && binResponse.message && binResponse.message.length > 0) {\n                            const binDetails = binResponse.message;\n                            binDetails.forEach(bin => {\n                                warehouseHtml += `${bin.warehouse}<br>`;\n                                stockQtyHtml += `${bin.actual_qty}<br>`;\n                            });\n                        } else {\n                            warehouseHtml = 'N/A';\n                            stockQtyHtml = 'N/A';\n                        }\n\n                        itemInfoHtml += `\n                            <tr>\n                                <td>${item.item_code}</td>\n                                <td>${item.item_name}</td>\n                                <td>${item.item_group}</td>\n                                <td>${item.stock_uom}</td>\n                                <td>${item.description}</td>\n                                <td>${item.last_purchase_rate}</td>\n                                <td>${warehouseHtml}</td>\n                                <td>${stockQtyHtml}</td>\n                            </tr>`;\n                    }\n\n                    itemInfoHtml += `\n                                </tbody>\n                            </table>\n                        </div>`;\n\n                    $(itemInfoHtml).appendTo(d.body);\n                    d.show();\n                } else {\n                    frappe.msgprint('No item details found.');\n                }\n            } catch (err) {\n                console.error('Error fetching data:', err);\n                frappe.msgprint('Error fetching item details. Please try again.');\n            }\n        },\n        page: this.page,\n        description: __('Get Item Details'),\n        ignore_inputs: true\n    });\n} });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:16:33.818142",
  "module": "sil",
  "name": "Sales order Net total",
  "script": "frappe.ui.form.on('Sales Order', {\n      before_save: function (frm) {\n        frm.set_value(\"custom_net_totals\", frm.doc.net_total);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:36:22.842987",
  "module": "sil",
  "name": "Sales order Rounded total",
  "script": "frappe.ui.form.on('Sales Order', {\n\tbefore_save: function (frm) {\n        frm.set_value(\"custom_rounded_total\", frm.doc.rounded_total);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:37:57.983612",
  "module": "sil",
  "name": "Sales order 3 field populate",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_save: function (frm) {\n        frm.set_value(\"custom_total_qty\", frm.doc.total_qty);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.487081",
  "module": "sil",
  "name": "Confirmation msg for workflow",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_workflow_action: async (frm) => {\n        let promise = new Promise((resolve, reject) => {\n         frappe.dom.unfreeze()\n            frappe.confirm(\n                \"<b>Are you sure you want to proceed?</b><ul>\",\n                () => resolve(), // User confirms\n                () => reject()   // User rejects\n            );\n        });\n        await promise.catch(() => frappe.throw()); // If the promise is rejected, throw an error\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.464910",
  "module": "sil",
  "name": "Sales order gst",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_gst_category: function(frm) {\n        // Update custom_sales_type field options based on custom_gst_category value\n        if (frm.doc.custom_customer_location_type == \"India\") {\n            if (frm.doc.custom_gst_category == \"Registered Composition\" ||\n                frm.doc.custom_gst_category == \"Registered Regular\") {\n                frm.fields_dict['custom_sales_type'].set_input(\"B2B AMC INDIA\\nB2B SPARES INDIA\\nB2B CONSUMABLES INDIA\\nB2B PRODUCT INDIA\");\n            } else if (frm.doc.custom_gst_category == \"Unregistered\") {\n                frm.fields_dict['custom_sales_type'].set_input(\"B2C AMC INDIA\\nB2C SPARES INDIA\\nB2C CONSUMABLES INDIA\\nB2C PRODUCT INDIA\");\n            }\n        } else if (frm.doc.custom_customer_location_type == \"International\") {\n            frm.fields_dict['custom_sales_type'].set_input(\"SALES INTERNATIONAL\");\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "General Messages",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.437605",
  "module": "sil",
  "name": "General Messages",
  "script": "frappe.ui.form.on('General Messages', {\n    hr: function(frm) {\n        if (cur_frm.doc.hr == 1) {\n            cur_frm.set_value(\"role1\", \"HR User\");\n        }\n    },\n\n    reporting_authority: function(frm) {\n        if (cur_frm.doc.reporting_authority == 1) {\n            cur_frm.set_value(\"role1\", \"Reporting Authority\");\n        }\n    },\n    \n    after_save: function(frm) {\n        if(cur_frm.doc.reporting_authority == 1 && cur_frm.doc.hr == 1){\n              cur_frm.set_value(\"role1\", \"Bothpermission\");\n        }\n        \n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.412712",
  "module": "sil",
  "name": "Leave application Popup",
  "script": "frappe.ui.form.on('Leave Application', {\n\tafter_save(frm) {\n\talert(__(\"Submit to confirm Actions->Submit\"));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.359818",
  "module": "sil",
  "name": "Changes in Tally updated",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        if (frm.doc.status == 'Cancelled') {\n            if (frm.doc.custom_is_updated == 0) {\n                frm.doc.custom_is_updated = 1;\n                frm.doc.is_tallyupdated = 0;\n                frm.save();\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.391895",
  "module": "sil",
  "name": "Add custom Button",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Issue'), function(){\n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Issue\",\n                target: frm,\n                setters: {},\n                get_query() {\n                    return {\n                        filters: { status: 'Closed' }\n                    }\n                },\n                action(selections) {\n                    if (selections && selections.length > 0) {\n                       $.each(selections, function (i, custom_item) {\n                           console.log(custom_item);\n                           frappe.db.get_list('Issue', {\n                                fields: ['customer','custom_item.itemss','custom_item.qty'],\n                                filters: {\"name\": custom_item}\n                            }).then(records => {\n                                console.log(records);\n                                frm.set_value(\"customer\", records[0].customer);\n                                frm.clear_table(\"items\");\n\t\t\t\t\t\t\t\t\t// frm.add_child(\"items\",{\n\t\t\t\t\t\t\t\t//   item_code: records[0].itemss,\n\t\t\t\t\t\t\t\t//   qty:records[0].qty\n\t\t\t\t\t\t\t\t// });\n                                let row = frm.add_child(\"items\");\n                                frappe.model.set_value(row.doctype, row.name, \"item_code\", records[0].itemss);\n                                frappe.model.set_value(row.doctype, row.name, \"qty\", records[0].qty);\n                                frm.refresh_field(\"items\");\n                            }).catch(err => {\n                                console.error(err);\n                            });\n                        });\n                        $(\".modal\").modal(\"hide\");\n                    }\n                }\n            });\n        }, __(\"Get Items From\"));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-08-12 11:29:37.981786",
  "module": "sil",
  "name": "Cluster Filter Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_state: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state);\n\n            frappe.call({\n                method: \"erpnext.stock.doctype.item.api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:30:13.991019",
  "module": "sil",
  "name": "Cluster Filter in Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_state: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state);\n\n            frappe.call({\n                method: \"erpnext.stock.doctype.item.api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-10-11 10:24:52.255216",
  "module": "sil",
  "name": "Weekly Checkin Report",
  "script": "frappe.ui.form.on('Shift Type', {\n    refresh: function(frm) {\n        // Add a custom button to open the filter dialog\n        frm.add_custom_button(__('Generate Check-in Report'), function() {\n            open_filter_dialog(frm);\n        });\n    }\n});\n\nfunction open_filter_dialog(frm) {\n    // Create a dialog with employee, from date, and to date fields\n    let dialog = new frappe.ui.Dialog({\n        title: 'Filter for Check-in Report',\n        fields: [\n            {\n                label: 'Employee',\n                fieldname: 'employee',\n                fieldtype: 'Link',\n                options: 'Employee',\n                reqd: 0  // Optional\n            },\n            {\n                label: 'From Date',\n                fieldname: 'from_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            },\n             {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                label: 'To Date',\n                fieldname: 'to_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            }\n        ],\n        primary_action_label: 'Generate Report',\n        primary_action(values) {\n            try {\n                // Ensure valid input\n                if (!values.from_date || !values.to_date) {\n                    frappe.msgprint(__('Please fill all required fields.'));\n                    return;\n                }\n\n                // Validate that the 'to_date' is not earlier than 'from_date'\n                if (values.to_date < values.from_date) {\n                    frappe.msgprint(__('To Date cannot be earlier than From Date.'));\n                    return;\n                }\n\n                // Call the server-side function to generate the report\n                frappe.call({\n                    method: 'sil.services.checkin_report_api.get_combined_checkin_report_to_hr',\n                    args: {\n                        employee_name: values.employee || '', // Use empty string if no employee selected\n                        from_date: values.from_date,\n                        to_date: values.to_date\n                    },\n                    callback: function(response) {\n                        if (response.message && response.message.file_url) {\n                            let file_url = response.message.file_url;\n\n                            // If the URL is relative, adjust to the full URL\n                            if (file_url.startsWith('./')) {\n                                file_url = window.location.origin + file_url.replace('./', '/');\n                            }\n\n                            // Trigger file download\n                            let link = document.createElement('a');\n                            link.href = file_url;\n                            link.download = 'Check_In_Report.xls';  // Set the download filename\n                            link.click();\n\n                            frappe.msgprint({\n                                title: __('Success'),\n                                indicator: 'green',\n                                message: __('Check-in report generated and downloaded.')\n                            });\n                        } else {\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('An error occurred while generating the report.')\n                            });\n                            console.error('Error in generating the report:', response.message || 'Unknown error');\n                        }\n                    },\n                    error: function(error) {\n                        frappe.msgprint({\n                            title: __('Error'),\n                            indicator: 'red',\n                            message: __('Server error occurred while generating the report.')\n                        });\n                        console.error('Server error:', error);\n                    }\n                });\n\n                dialog.hide();\n            } catch (e) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('An unexpected error occurred.')\n                });\n                console.error('Unexpected error:', e);\n            }\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-10-11 10:32:57.644464",
  "module": "sil",
  "name": "Export Sales Invoice Report",
  "script": "frappe.ui.form.on('Shift Type', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Download Sales Invoice Report'), function() {\n            open_download_dialog(frm);\n        });\n    }\n});\n\nfunction open_download_dialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Download Sales Invoice Report'),\n        fields: [\n            {\n                fieldtype: 'Section Break',\n                label: __('Manager Filters'),\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_zonal_manager',\n                label: __('Zonal Manager'),\n                options: 'Zonal Manager',\n                reqd: 0,\n                columns: 2,\n                description: __('(Select the Zonal Manager for the report.)')\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_regional_manager',\n                label: __('Regional Manager'),\n                options: 'Regional Manager',\n                reqd: 0,\n                columns: 2,\n                description: __('(Select the Regional Manager for the report.)')\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_cluster',\n                label: __('Cluster'),\n                options: 'Cluster',\n                reqd: 0,\n                description: __('(Select the Cluster for the report.)')\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_cluster_manager',\n                label: __('Cluster Manager'),\n                options: 'Cluster Manager',\n                reqd: 0,\n                description: __('Select the Cluster Manager for the report.')\n            },\n            \n            {\n                fieldtype: 'Section Break',\n                label: __('Customer Filter'),\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'customer_name',\n                label: __('Customer Name'),\n                options: 'Customer',\n                reqd: 0,\n                description: __('Select the Customer for the report.')\n            },\n            \n            {\n                fieldtype: 'Section Break',\n                label: __('Date Filters'),\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column for date filters\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'starting_posting_date',\n                label: __('From Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                description: __('Select the start date for the report.')\n            },\n            {\n                fieldtype: 'Column Break' // End the first date column and start the second\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'ending_posting_date',\n                label: __('To Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                description: __('Select the end date for the report.')\n            }\n        ],\n        primary_action_label: __('Download'),\n        primary_action(values) {\n            // Validate dates\n            if (values.starting_posting_date > values.ending_posting_date) {\n                frappe.msgprint(__('Error: From Date cannot be later than To Date.'));\n                return;\n            }\n\n            // Call the server-side function to generate and download the report\n            frappe.call({\n                method: 'sil.services.sales_invoice_report_api.generate_and_download_sales_invoice_report',\n                args: {\n                    filters: {\n                        custom_zonal_manager: values.custom_zonal_manager,\n                        custom_regional_manager: values.custom_regional_manager,\n                        custom_cluster: values.custom_cluster,\n                        custom_cluster_manager: values.custom_cluster_manager,\n                        customer_name: values.customer_name,\n                        starting_posting_date: values.starting_posting_date,\n                        ending_posting_date: values.ending_posting_date\n                    }\n                },\n                callback: function(response) {\n                    if (response.message && response.message.file_url) {\n                        // Create an invisible anchor element\n                        const link = document.createElement('a');\n                        link.href = response.message.file_url;\n                        link.download = response.message.file_name || 'sales_invoice_report.xlsx'; // Default file name if not provided\n                        // document.body.appendChild(link);\n                        link.click(); // Programmatically click the link to trigger the download\n                        // document.body.removeChild(link); // Remove the link from the document\n                    } else {\n                        frappe.msgprint(__('Error: {0}', [response.message.error || 'Unknown error']));\n                    }\n                },\n                error: function(err) {\n                    frappe.msgprint(__('An unexpected error occurred. Please try again.'));\n                    console.error(err);\n                }\n            });\n            dialog.hide();\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Intimation",
  "enabled": 1,
  "modified": "2025-02-27 18:57:36.269275",
  "module": "sil",
  "name": "Populate Receipt Entries",
  "script": "frappe.ui.form.on('Payment Intimation', {\n    \n    refresh: function (frm) {\n        // Check if the document is saved (not new)\n        if (!frm.is_new()) {\n            // If custom_status is not 'Rejected', disable all fields\n            if (frm.doc.custom_status != \"Rejected\") {\n                frm.disable_form();  // This disables all fields on the form\n            }\n        }\n        \n        // Load Awesomplete and setup after it's loaded\n        if (!window.Awesomplete) {\n            frappe.dom.load_css('https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.css');\n            frappe.dom.load_script('https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.js')\n                .then(() => {\n                    setupAwesompleteForTable(frm);\n                });\n        } else {\n            setupAwesompleteForTable(frm);\n        }\n    },\n    \n    onload: function(frm) {\n        console.log(\"Form loaded\");\n        frm.set_value(\"date\", frappe.datetime.get_today());\n        frm.doc.receipt_entry.forEach(row => {\n            frappe.meta.get_docfield(\"Receipt\", \"outstanding_amount\", frm.doc.name).read_only = 1;\n        });\n        frm.refresh_field(\"receipt_entry\");\n        \n        // Set field properties for existing rows\n        if(frm.doc.receipt_entry) {\n            frm.doc.receipt_entry.forEach(function(row) {\n                frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[row.name]\n                    .toggle_editable('outstanding_amount', row.reference_type !== 'Advance');\n            });\n        }\n    },\n    \n    amount: function(frm) {\n        update_unallocated_amount(frm);\n    },\n    \n    mode_of_payment: function(frm) {\n        if (frm.doc.mode_of_payment === 'Cash') {\n            frm.set_value('account_paid_to', 'Cash - SIL');\n        } else {\n            frm.set_value('account_paid_to', 'Bank Account - SIL');  // Replace with your actual bank account\n        }\n        \n        // Optionally refresh the field to ensure UI updates\n        frm.refresh_field('account_paid_to');\n    },\n    \n    receipt_entry: function(frm) {\n        update_unallocated_amount(frm);\n    },\n    \n    validate: function(frm) {\n        check_for_duplicate_entries(frm);\n        check_for_slip_no_entries(frm);\n    },\n\n    after_save: function(frm) {\n        // Make all fields readonly using frappe.meta.get_docfield\n        // const fields = ['customer', 'reference_type', 'reference_name', 'outstanding_amount', 'allocated_amount'];\n        // fields.forEach(field => {\n        //     frappe.meta.get_docfield(\"Receipt\", field, frm.doc.name).read_only = 1;\n        // });\n        \n        frm.refresh_field('receipt_entry');\n        \n        // Check if the value of 'custom_status' is 'Rejected'\n        if (frm.doc.custom_status === 'Rejected') {\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Payment Intimation\",\n                    name: frm.doc.name,\n                    fieldname: {\n                        custom_status: \"Pending\",\n                        custom_receipt_status: \"Pending\"\n                    }\n                },\n                callback: function(response) {\n                    if (!response.exc) {\n                        frappe.msgprint({\n                            title: __('Success'),\n                            message: __('Payment saved successfully and status updated.'),\n                            indicator: 'green'\n                        });\n                        // Route to new form instead of list\n                        frappe.new_doc(\"Payment Intimation\");\n                    }\n                }\n            });\n        } else {\n            frappe.msgprint({\n                title: __('Success'),\n                message: __('Payment saved successfully.'),\n                indicator: 'green'\n            });\n            // Route to new form instead of list\n            frappe.new_doc(\"Payment Intimation\");\n        }\n    }\n});\n\nfrappe.ui.form.on('Receipt', {\n    \n    receipt_entry_add: function(frm, cdt, cdn) {\n        // Loop through all rows except the newly added one\n        frm.doc.receipt_entry.forEach(function(row) {\n            // if (row.name !== cdn) {  // Skip the newly added row\n            //     // Make reference_name readonly for previous rows\n            //     frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[row.name]\n            //         .toggle_editable('reference_name', false);\n            // }\n        });\n        \n        // Refresh the grid to show changes\n        frm.refresh_field('receipt_entry');\n        update_unallocated_amount(frm);\n\n        console.log(\"Previous rows made readonly\");\n    \n    },\n    \n    receipt_entry_remove: function(frm, cdt, cdn) {\n        // Refresh reference name options for all rows after deletion\n        frm.doc.receipt_entry.forEach(function(row) {\n            if (row.customer && row.reference_type) {\n                refresh_reference_names(frm, row.doctype, row.name);\n                update_unallocated_amount(frm);\n            }\n        });\n    },\n    \n    customer: function(frm, cdt, cdn) {\n        check_and_call_server(frm, cdt, cdn);\n    },\n    \n    amount: function(frm, cdt, cdn) {\n        check_and_call_server(frm, cdt, cdn);\n    },\n   \n    reference_type: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        // Clear existing values\n        frappe.model.set_value(cdt, cdn, 'reference_name', '');\n        frappe.model.set_value(cdt, cdn, 'outstanding_amount', 0);\n        frappe.model.set_value(cdt, cdn, 'allocated_amount', 0);\n\n        // Get reference_name field\n        let refNameField = frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n            .get_field('reference_name');\n        refNameField.df.options = [];\n        refNameField.refresh();\n\n        // Toggle editable based on reference_type\n        frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n            .toggle_editable('reference_name', row.reference_type !== 'Advance');\n\n        if (row.reference_type === 'Slip No') {\n            // Open dialog to enter Slip Number\n            let dialog = new frappe.ui.Dialog({\n                title: 'Enter Slip Number',\n                fields: [\n                    {\n                        label: 'Slip Number',\n                        fieldname: 'slip_no',\n                        fieldtype: 'Data',\n                        reqd: 1\n                    }\n                ],\n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    frappe.call({\n                        method: 'sil.services.receipt_information_api.check_slip_number_exists',\n                        args: {\n                            slip_no: values.slip_no\n                        },\n                        callback: function(r) {\n                            if (r.message && r.message.exists) {\n                                frappe.msgprint({\n                                    title: __('Duplicate Slip Number'),\n                                    message: __('This slip number already exists. Please enter a different one.'),\n                                    indicator: 'red'\n                                });\n                            } else {\n                                // Add Slip Number if it doesn't exist\n                                refNameField.df.options = [values.slip_no];\n                                frappe.model.set_value(cdt, cdn, 'reference_name', values.slip_no);\n                                refNameField.refresh();\n                                dialog.hide();\n                                frappe.show_alert({\n                                    message: __('Slip number added successfully'),\n                                    indicator: 'green'\n                                });\n                            }\n                        }\n                    });\n                }\n            });\n            dialog.show();\n        } else {\n            // Handle other reference types\n            if (row.customer && row.reference_type) {\n                check_and_call_server(frm, cdt, cdn);\n            }\n            \n            // Apply Awesomplete for Sales Invoice and Sales Order\n            if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n                setTimeout(() => {\n                    setupAwesompleteForRow(frm, cdt, cdn);\n                }, 300);\n            }\n        }\n    },\n    \n    reference_name: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        // Reset allocated amount when reference name changes to prevent validation issues\n        frappe.model.set_value(cdt, cdn, 'allocated_amount', 0);\n        row.is_manually_set = false;\n        \n        check_and_call_server(frm, cdt, cdn);\n        frm.refresh_field(\"receipt_entry\");\n    },\n    \n    custom_emp_liability_amount: function(frm, cdt, cdn){\n        update_unallocated_amount(frm);\n    },\n    \n    allocated_amount: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        row.is_manually_set = true;\n        \n        // Only validate against outstanding for Sales Invoice and Sales Order\n        if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n            let allocated = parseFloat(row.allocated_amount || 0.0);\n            let outstanding = parseFloat(row.outstanding_amount || 0.0);\n            \n            if (allocated > outstanding) {\n                frappe.msgprint(__('The allocated amount cannot exceed the outstanding amount.'));\n                frappe.model.set_value(cdt, cdn, 'allocated_amount', outstanding);\n                return;\n            }\n        }\n        \n        // Calculate total allocated amount excluding current row\n        let total_allocated = 0;\n        frm.doc.receipt_entry.forEach(function(r) {\n            if (r.name !== row.name) {\n                total_allocated += parseFloat(r.allocated_amount || 0.0);\n            }\n        });\n        \n        let max_possible = parseFloat(frm.doc.amount || 0.0) - total_allocated;\n        let current_allocated = parseFloat(row.allocated_amount || 0.0);\n        \n        if (current_allocated > max_possible) {\n            frappe.msgprint(__('The allocated amount cannot exceed the available unallocated amount.'));\n            frappe.model.set_value(cdt, cdn, 'allocated_amount', max_possible);\n            return;\n        }\n\n        update_parent_field(frm, cdt, cdn);\n        update_unallocated_amount(frm);\n    }\n});\n\n// Function to check for duplicate entries in the child table\nfunction check_for_duplicate_entries(frm) {\n    let seen_entries = new Set();\n    frm.doc.receipt_entry.forEach(function(row) {\n        let key = `${row.customer || ''}-${row.reference_type || ''}-${row.reference_name || ''}`;\n        if (seen_entries.has(key)) {\n            frappe.msgprint({\n                title: __('Duplicate Entry'),\n                message: __('Duplicate entry found for Customer: {0}, Reference Type: {1}, Reference Name: {2}', \n                    [row.customer, row.reference_type, row.reference_name]),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            frappe.throw(__('Please remove duplicate entries in the child table.'));\n        }\n        seen_entries.add(key);\n    });\n}\n\nfunction check_for_slip_no_entries(frm) {\n    frm.doc.receipt_entry.forEach(function(row) {\n        if (row.reference_type === 'Slip No') {\n            if (!row.customer || !row.reference_name || !row.allocated_amount || row.allocated_amount <= 0) {\n                frappe.msgprint({\n                    title: __('Missing Fields for Slip No Entry '),\n                    message: __('Please fill the mandatory fields for Slip No entries.'),\n                    indicator: 'red'\n                });\n                frappe.validated = false; // Prevent save action if validation fails\n            }\n        }\n    });\n}\n\n// Function to fetch receipt information and handle validations\nfunction check_and_call_server(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    if (!frm.doc.amount) {\n        frappe.msgprint(__('Please enter the total amount.'));\n        return;\n    }\n\n    row.is_manually_set = false;\n    update_unallocated_amount(frm);\n    \n    if (!row.customer || !row.reference_type) return;\n\n    if (!row.reference_name || row.reference_name === \"\") {\n        refresh_reference_names(frm, cdt, cdn);\n    } else {\n        frappe.call({\n            method: 'sil.services.receipt_information_api.get_all_receipt_info_by_reference_name',\n            args: {\n                customer: row.customer,\n                reference_type: row.reference_type,\n                reference_name: row.reference_name\n            },\n            callback: function(r) {\n                if (r.message) {\n                    let outstanding = parseFloat(r.message.outstanding_amount || 0.0);\n                    \n                    // Set outstanding amount first\n                    frappe.model.set_value(cdt, cdn, 'outstanding_amount', outstanding);\n                    \n                    // Calculate available unallocated amount\n                    let total_allocated = 0;\n                    frm.doc.receipt_entry.forEach(function(r) {\n                        if (r.name !== cdn) {\n                            total_allocated += parseFloat(r.allocated_amount || 0.0);\n                        }\n                    });\n                    \n                    let available_amount = parseFloat(frm.doc.amount || 0.0) - total_allocated;\n                    let allocated = Math.min(outstanding, available_amount);\n                    \n                    // Set allocated amount after ensuring it doesn't exceed outstanding\n                    frappe.model.set_value(cdt, cdn, 'allocated_amount', allocated);\n                    \n                    frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn].refresh_field('reference_name');\n                    frm.refresh_field('receipt_entry');\n                    update_unallocated_amount(frm);\n                }\n            }\n        });\n    }\n}\n\n// Function to update parent fields based on child table entries\nfunction update_parent_field(frm, cdt, cdn) {\n    let total_allocated_amount = 0.0;\n    frm.doc.receipt_entry.forEach(function(row) {\n        if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n            if (parseFloat(row.allocated_amount || 0.0) > parseFloat(row.outstanding_amount || 0.0)) {\n                frappe.msgprint(__('The allocated amount ({0}) cannot exceed the outstanding amount ({1}).',\n                    [parseFloat(row.allocated_amount), parseFloat(row.outstanding_amount)]));\n                frappe.model.set_value(cdt, cdn, 'allocated_amount', row.outstanding_amount);\n                frappe.validated = false;\n                return false;\n            }\n        }\n        total_allocated_amount += parseFloat(row.allocated_amount || 0.0);\n    });\n    update_unallocated_amount(frm);\n}\n\n// Function to update unallocated amount in the parent form\nfunction update_unallocated_amount(frm) {\n    let total_amount = parseFloat(frm.doc.amount || 0.0);\n    let unallocated = total_amount;\n\n    frm.doc.receipt_entry.forEach(function(row) {\n        let allocated_amount = parseFloat(row.allocated_amount || 0.0);\n        let outstanding_amount = parseFloat(row.outstanding_amount || 0.0);\n\n        if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n            // Ensure allocated amount never exceeds outstanding amount\n            if (allocated_amount > outstanding_amount) {\n                allocated_amount = outstanding_amount;\n                frappe.model.set_value(row.doctype, row.name, 'allocated_amount', allocated_amount);\n            }\n        }\n\n        unallocated -= allocated_amount;\n    });\n\n    // Round to 2 decimal places to avoid floating point issues\n    unallocated = Number(unallocated.toFixed(2));\n    \n    if (Math.abs(unallocated) < 0.01) {\n        frm.set_value('unallocated_amount', '0');\n    } else {\n        frm.set_value('unallocated_amount', unallocated);\n    }\n\n    if (unallocated < 0) {\n        frappe.msgprint(__('The total allocated amount exceeds the total available amount.'));\n        frappe.validated = false;\n    }\n}\n\nfunction refresh_reference_names(frm, cdt, cdn) {\n    let current_row = locals[cdt][cdn];\n    \n    // Get all currently selected reference names except for current row\n    let selected_references = frm.doc.receipt_entry\n        .filter(row => row.name !== cdn && row.reference_name)\n        .map(row => row.reference_name);\n    \n    frappe.call({\n        method: 'sil.services.receipt_information_api.get_all_receipt_info_by_reference_type_and_cust_name',\n        args: {\n            customer: current_row.customer,\n            reference_type: current_row.reference_type\n        },\n        callback: function(r) {\n            if (r.message && Array.isArray(r.message.reference_name)) {\n                // Filter out already selected reference names\n                let available_references = r.message.reference_name\n                    .filter(item => !selected_references.includes(item.name))\n                    .map(item => item.name);\n                \n                let refNameField = frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n                    .get_field('reference_name');\n                refNameField.df.options = available_references;\n                refNameField.refresh();\n            }\n        }\n    });\n}\n\n// Improved Awesomplete implementation\nfunction setupAwesompleteForTable(frm) {\n    // Apply Awesomplete to existing rows\n    if(frm.doc.receipt_entry && frm.doc.receipt_entry.length > 0) {\n        frm.doc.receipt_entry.forEach(function(row) {\n            if(row.reference_type === \"Sales Invoice\" || row.reference_type === \"Sales Order\") {\n                setupAwesompleteForRow(frm, row.doctype, row.name);\n            }\n        });\n    }\n    \n    // Setup a hook for when the grid refreshes\n    frm.fields_dict[\"receipt_entry\"].grid.wrapper.on('refresh', function() {\n        setTimeout(() => {\n            frm.doc.receipt_entry.forEach(function(row) {\n                if(row.reference_type === \"Sales Invoice\" || row.reference_type === \"Sales Order\") {\n                    setupAwesompleteForRow(frm, row.doctype, row.name);\n                }\n            });\n        }, 300);\n    });\n}\n\nfunction setupAwesompleteForRow(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    const grid_row = frm.fields_dict.receipt_entry.grid.grid_rows_by_docname[cdn];\n    \n    if(!grid_row) return;\n    \n    // Wait for the DOM to be ready\n    setTimeout(() => {\n        // Find the reference_name cell\n        const $cell = $(grid_row.row).find('[data-fieldname=\"reference_name\"]');\n        const $select = $cell.find('select');\n        \n        if($select.length === 0) return;\n        \n        // Check if we already applied Awesomplete to avoid duplicates\n        if($cell.find('input.awesomplete-input').length > 0) return;\n        \n        // Create our custom search input\n        const $search_input = $(`<input type=\"text\" class=\"form-control awesomplete-input\" placeholder=\"Search...\">`);\n        \n        // Insert the search input before the select and hide the select\n        $select.before($search_input);\n        $select.css('display', 'none');\n        \n        // Initialize Awesomplete with contains filter\n        const awesomplete = new Awesomplete($search_input[0], {\n            minChars: 0, // Show all options even before typing\n            autoFirst: true,\n            maxItems: 15,\n            filter: function(text, input) {\n                // If no input, show all options\n                if (input.length === 0) return true;\n                // Otherwise use contains filter\n                return Awesomplete.FILTER_CONTAINS(text, input);\n            }\n        });\n        \n        // Set initial value if one exists\n        if(row.reference_name) {\n            $search_input.val(row.reference_name);\n        }\n        \n        // Get all currently selected reference names except for current row\n        let selected_references = frm.doc.receipt_entry\n            .filter(r => r.name !== cdn && r.reference_name)\n            .map(r => r.reference_name);\n        \n        // Load initial options when the field gets focus\n        $search_input.on('focus', function() {\n            loadOptionsForRow(frm, row, awesomplete, '', selected_references);\n            // Show dropdown immediately on focus\n            setTimeout(() => {\n                awesomplete.evaluate();\n            }, 100);\n        });\n        \n        // Handle search input changes\n        $search_input.on('input', function() {\n            const search_text = $(this).val();\n            loadOptionsForRow(frm, row, awesomplete, search_text, selected_references);\n        });\n        \n        // Handle selection from dropdown\n        $search_input.on('awesomplete-selectcomplete', function(e) {\n            const selected_value = e.originalEvent.text.value;\n            $select.val(selected_value);\n            \n            // Update the model\n            frappe.model.set_value(cdt, cdn, 'reference_name', selected_value);\n            grid_row.refresh();\n        });\n        \n        // Initial load of options\n        loadOptionsForRow(frm, row, awesomplete, '', selected_references);\n    }, 300);\n}\n\n// Load options for a specific row based on search text\nfunction loadOptionsForRow(frm, row, awesomplete, search_text = '', selected_references = []) {\n    frappe.call({\n        method: 'sil.services.receipt_information_api.get_all_receipt_info_by_reference_type_and_cust_name',\n        args: {\n            customer: row.customer || frm.doc.customer,\n            reference_type: row.reference_type,\n            search_text: search_text\n        },\n        callback: function(r) {\n            if(r.message && r.message.reference_name) {\n                // Filter out already selected reference names\n                const options = r.message.reference_name\n                    .filter(item => !selected_references.includes(item.name))\n                    .map(item => item.name);\n                \n                awesomplete.list = options;\n                \n                // Show dropdown immediately if field is focused\n                if(document.activeElement === awesomplete.input) {\n                    awesomplete.evaluate();\n                }\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Receipt",
  "enabled": 1,
  "modified": "2025-02-07 14:10:42.507086",
  "module": "sil",
  "name": "Populate SIL Payment Entry",
  "script": "frappe.ui.form.on('Payment Receipt', {\n    refresh: function (frm) {\n        frm.set_value(\"date\", frappe.datetime.get_today());\n        frm.set_df_property('customer_name', 'hidden', 1);\n        frm.set_df_property('receipt_number', 'hidden', 1);\n        frm.set_df_property('custom_payment_intimation_receipt_no', 'hidden', 1);\n        \n        frm.add_custom_button(__('Get Receipt Information'), function () {\n            try {\n                open_filter_dialog(frm);\n            } catch (error) {\n                console.error('Error in refresh function:', error);\n                frappe.msgprint(__('An unexpected error occurred while opening the filter dialog.'));\n            }\n        });\n    },\n    payment_type: function(frm) {\n        // Check if 'payment_type' is 'Internal Transfer' and 'custom_is_suspense_entry' is checked\n        if (frm.doc.payment_type === 'Internal Transfer' && frm.doc.custom_is_suspense_entry) {\n            frm.set_value('custom_status', 'Processing');\n        } else {\n            frm.set_value('custom_status', 'Pending');\n        }\n\n        toggleFieldsVisibility(frm);\n    },\n\n    custom_is_suspense_entry: function(frm) {\n        // Check if 'custom_is_suspense_entry' is checked, also evaluate the 'payment_type'\n        if (frm.doc.payment_type === 'Internal Transfer' && frm.doc.custom_is_suspense_entry) {\n            frm.set_value('custom_status', 'Processing');\n        } else {\n            frm.set_value('custom_status', 'Pending');\n        }\n    },\n    validate: function (frm) {\n    frm.refresh_field('payment_entry_details');\n        \n    },\n    on_submit: function(frm) {\n        // new Payment Receip form loads\n        frappe.new_doc(\"Payment Receipt\");\n    }\n\n});\n\n// format amount decimal\nfunction formatDecimal(value) {\n    return parseFloat(value || 0).toFixed(2);\n}\n\nfunction open_filter_dialog(frm) {\n    let selectedReceipts = [];\n    const dialog = new frappe.ui.Dialog({\n        title: __('Select Executive and Receipt'),\n        size: \"large\",  // Dialog size set to large\n\n        fields: [\n            { \n                label: 'All', \n                fieldname: 'all', \n                fieldtype: 'Check', \n                default: 1, \n                onchange: handleAllSelection \n            },\n              {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Received By Executive', \n                fieldname: 'executive', \n                fieldtype: 'Select', \n                hidden: 1, \n                options: [],\n                onchange: handleSelection\n            },  \n              {\n                fieldtype: 'Column Break'\n            },            \n            { \n                label: 'Deposit By Customer', \n                fieldname: 'customer', \n                fieldtype: 'Select', \n                hidden: 0, \n                options: [],\n                onchange: handleSelection\n            },\n             \n             {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Deposit Date', \n                fieldname: 'date', \n                fieldtype: 'Select', \n                options: [],\n                onchange: handleSelection\n            },\n             {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Payment Mode', \n                fieldname: 'payment_mode', \n                fieldtype: 'Select', \n                options: [],\n                onchange: handleSelection \n            },\n             {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Amount', \n                fieldname: 'amount', \n                fieldtype: 'Select', \n                options: [],\n                onchange: handleSelection\n            },\n             {\n                  label: 'Receipt Entries', \n                fieldtype: 'Section Break'\n            },\n            { \n                label: 'Receipts', \n                fieldname: 'receipts_table', \n                fieldtype: 'HTML' \n            },\n             {\n                fieldtype: 'Section Break'\n            },  \n            \n            {\n            fieldtype: 'HTML',\n            fieldname: 'button_container',\n            options: `\n                <div class=\"custom-button-container\">\n                    <button class=\"btn btn-primary custom-get-button\">Get Receipt Details</button>\n                    <button class=\"btn btn-primary custom-approve-button\">Move to Journal</button>\n                    <button class=\"btn btn-primary custom-reject-button\">Reject</button>                     \n                    <button class=\"btn btn-primary custom-suspense-button\">View Suspense Details</button>                     \n\n                    \n                </div>\n            `\n             }\n        ],\n        \n    });\n    \n    \n$(document).off('click', '.custom-approve-button').on('click', '.custom-approve-button', function () {\n    if (selectedReceipts.length === 0) {\n        console.warn(\"No receipts selected.\");\n        return;\n    }\n\n    moveToJournal(frm, dialog, selectedReceipts.join(', '))\n        .then(() => {\n            if (dialog && typeof dialog.hide === 'function') {\n                dialog.hide();\n                console.log(\"Dialog successfully hidden.\");\n            }\n        })\n        .catch(error => {\n            console.error(\"Error in moveToJournal:\", error);\n        });\n});\n\n\n    \n    $(document).off('click', '.custom-reject-button').on('click', '.custom-reject-button', function () {\n            open_remark_dialog('Reject Receipt Info');\n            dialog.hide();\n    });\n    $(document).on('click', '.custom-get-button', function () {\n        // const selectedReceipts = []; // Logic to fetch selected receipts\n        console.log(\"custom-get-button selectedReceipts :\",selectedReceipts)\n        handleGetAction(dialog, frm, selectedReceipts.join(', '));\n    });\n$(document).ready(function () {\n    $(document).off('click', '.custom-suspense-button').on('click', '.custom-suspense-button', function () {\n        console.log('Button clicked!');\n        console.log($('.custom-suspense-button').length);\n        open_suspense_dialog();\n    });\n});\n    function fetch_filter_options(dialog) {\n    frappe.call({\n        method: 'sil.services.receipt_information_api.get_filter_options',\n        args: {\n            all: dialog.get_value('all') ? 1 : 0,\n            executive: dialog.get_value('executive') || '',\n            deposit_date: dialog.get_value('date') || '',\n            payment_mode: dialog.get_value('payment_mode') || '',\n            customer: dialog.get_value('customer') || '',\n            deposit_amount: dialog.get_value('amount') || ''\n        },\n        callback: function(r) {\n            if (r.message && !r.message.error) {\n                const { executives, dates, amounts, payment_mode, customer } = r.message;\n                \n                // Update dialog fields only if we have values\n                if (executives && executives.length) {\n                    dialog.set_df_property('executive', 'options', executives);\n                }\n                if (dates && dates.length) {\n                    dialog.set_df_property('date', 'options', dates);\n                }\n                if (amounts && amounts.length) {\n                    dialog.set_df_property('amount', 'options', amounts);\n                }\n                if (payment_mode && payment_mode.length) {\n                    dialog.set_df_property('payment_mode', 'options', payment_mode);\n                }\n                if (customer && customer.length) {\n                    dialog.set_df_property('customer', 'options', customer);\n                }\n            } else if (r.message && r.message.error) {\n                frappe.msgprint(__('Error: ' + r.message.error));\n            } else {\n                frappe.msgprint(__('No data available for filtering.'));\n            }\n        },\n        error: function(err) {\n            console.error('Error fetching filter options:', err);\n            frappe.msgprint(__('An error occurred while fetching filter options.'));\n        }\n    });\n}\n                        \n    \n    function handleAllSelection() {\n        try {\n            const isAllChecked = dialog.get_value('all');\n            dialog.set_df_property('executive', 'hidden', isAllChecked);\n            selectedReceipts = [];\n            fetch_filter_options(dialog);\n            fetch_receipt_numbers(frm, isAllChecked ? 'All' : dialog.get_value('executive'), dialog, selectedReceipts);\n        } catch (error) {\n            console.error('Error in handleAllSelection:', error);\n            frappe.msgprint(__('An error occurred while handling the \"All\" selection.'));\n        }\n    }\n    \n      function handleSelection() {\n        try {\n            const isAllChecked = dialog.get_value('all');\n            dialog.set_df_property('executive', 'hidden', isAllChecked);\n            selectedReceipts = [];\n            fetch_receipt_numbers(frm, isAllChecked ? 'All' : dialog.get_value('executive'), dialog, selectedReceipts);\n        } catch (error) {\n            console.error('Error in handleAllSelection:', error);\n            frappe.msgprint(__('An error occurred while handling the \"All\" selection.'));\n        }\n    }\n\n    function fetch_receipt_numbers(frm, executive, dialog, selectedReceipts) {\n        const isAllChecked = dialog.get_value('all');\n        dialog.set_df_property('executive', 'hidden', isAllChecked);\n            \n        frappe.call({\n            method: 'sil.services.receipt_information_api.getAllReceiptInfoDetailsByExecutive',\n            args: {\n               executive: executive || '',\n                date: dialog.get_value('date') || '',\n                amount: dialog.get_value('amount') || 0,\n                mode_of_payment: dialog.get_value('payment_mode') || '',\n                deposited_by: dialog.get_value('customer') || ''\n            },\n            callback: function (r) {\n                try {\n                    if (r.message && r.message.length) {\n                        updateDialogOptions(r.message, dialog, selectedReceipts);\n                    } else {\n                        frappe.msgprint(__('No receipts found for the selected filters.'));\n                    }\n                } catch (error) {\n                    console.error('Error in callback of fetch_receipt_numbers:', error);\n                }\n            },\n            error: function (err) {\n                console.error('Error fetching receipt numbers:', err);\n                frappe.msgprint(__('An error occurred while fetching receipt numbers.'));\n            }\n        });\n    }\n\n    function updateDialogOptions(receipts, dialog, selectedReceipts) {\n        try {\n            const receiptOptions = receipts.map(receipt => {\n                // Use default values if any field is missing\n                const receiptNumber = receipt.name || '-';\n                const customer = receipt.custom_customer || receipt.executive;\n                const executive = receipt.executive || '-';\n                const date = receipt.date || '-';\n                const amount = receipt.amount || '-';\n                const modeOfPayment = receipt.mode_of_payment || '-';\n                const referenceNumber = receipt.chequereference_number || '-';\n                const referenceDate = receipt.reference_no || '-';\n\n                return `\n                    <tr>\n                        <td style=\"text-align: center;\"><input type=\"checkbox\" class=\"receipt-table1\" value=\"${receiptNumber}\"></td>\n <td><a href=\"#\" class=\"receipt-link receipt-number\" data-receipt-id=\"${receiptNumber}\" style=\"text-decoration: underline;\">${receiptNumber}</a></td>\n                        <td style=\"text-align:right\">${formatDecimal(amount)}</td>\n                        <td style=\"text-align:left\">${customer}</td>\n                        <td style=\"text-wrap:\"word-wrap\">${executive}</td>\n                        <td>${date}</td>\n                        \n                        <td style=\"text-align:left\">${modeOfPayment}</td>\n                        <td style=\"text-align:left\">${referenceNumber}</td>\n                        <td>${referenceDate}</td>\n                        \n                       \n                    </tr>\n                `;\n            }).join('');\n\nconst tableHTML = `\n <div class=\"table-wrapper table-text\">\n    <table class=\"table table-bordered \" style=\"border-radius: 8px; overflow: hidden; border-collapse: separate; border-spacing: 0;\">\n        <thead>\n            <tr>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\" class=\"receipt-table1\">Select</th>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\">Receipt No.</th>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\">Receipt Amount</th>\n                <th style=\"background-color: grey; color: white; word-wrap: break-word;\">Deposited By</th>\n                <th style=\"background-color: grey; color: white; word-wrap: break-word;\">Received By</th>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\">Deposit Date</th>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\">Payment Mode</th>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\">Txn Ref/Chq No.</th>\n                <th style=\"white-space: nowrap;background-color: grey; color: white;\">Txn Ref/Chq Date</th>\n                \n                \n            </tr>\n        </thead>\n        <tbody>${receiptOptions}</tbody>\n        </table>\n        </div>`;\n\nconst wrapper = dialog.fields_dict.receipts_table.$wrapper;\nwrapper.html(tableHTML);\nwrapper.css({\n    maxHeight: '30vh', // Set max height as a percentage of viewport height\n    overflowY: 'auto', // Enable vertical scrolling\n    overflowX: 'auto', // Enable horizontal scrolling\n});\n\n            // attachCheckboxHandlers(selectedReceipts);\n        } catch (error) {\n            console.error('Error in updateDialogOptions:', error);\n            frappe.msgprint(__('An error occurred while updating the receipt table.'));\n        }\n    }\n        \n       // Add CSS to style the buttons at the bottom left\n$(\"<style>\")\n    .prop(\"type\", \"text/css\")\n    .html(`\n        .modal-footer {\n            justify-content: flex-start; /* Align buttons to the left */\n        }\n        .custom-bottom-button {\n            margin-right: 10px; /* Space between buttons */\n            background-color: #007bff; /* Default button color */\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .custom-bottom-button:hover {\n            background-color: #0056b3; /* Darker shade on hover */\n        }\n        .custom-bottom-left-section {\n            float: left; /* Align to the bottom-left */\n            margin-right: auto; /* Prevent overlapping with buttons */\n            padding: 8px;\n        }\n        .custom-bottom-left-section table {\n            border-collapse: collapse;\n            width: auto; /* Adjust the width to content */\n        }\n        .custom-bottom-left-section th,\n        .custom-bottom-left-section td {\n            padding: 6px 12px;\n            border: 1px solid #ddd;\n        }\n        .custom-bottom-left-section th {\n            background-color: #f4f4f4;\n        }\n        .custom-bottom-buttons {\n            display: flex;\n            gap: 8px; /* Space between buttons */\n        }\n        .custom-button {\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-size: 14px;\n        }\n            .receipt-link {\n       \n        text-decoration: underline; /* Underlined by default */\n                background-color: #f0f8ff; /* Optional: Light blue background on hover */\n\n    }\n\n    .receipt-link:hover {\n        color: #0056b3; /* Darker shade on hover */\n        text-decoration: none; /* Remove underline on hover */\n        background-color: #f0f8ff; /* Optional: Light blue background on hover */\n        padding: 1px; /* Optional: Adds some spacing around the text */\n        border-radius: 4px; /* Optional: Rounded edges for background */\n    }\n    .table-text {\n        font-size:12px;\n    }\n    `)\n    .appendTo(\"head\");\n\n    \n\n    try {\n        dialog.show();\n        addCheckboxValidation('.receipt-table1',selectedReceipts);\n        const isAllChecked = dialog.get_value('all');\n        fetch_filter_options(dialog);\n        fetch_receipt_numbers(frm, isAllChecked ? 'All' : dialog.get_value('executive'), dialog, selectedReceipts);\n    } catch (error) {\n        console.error('Error initializing the dialog:', error);\n        frappe.msgprint(__('An error occurred while initializing the dialog.'));\n    }\n\n    dialog.$wrapper.find('.modal-dialog').css({\n    'width': '90%',  // Increase the width to 90% of the viewport, for example\n    'max-width': '1500px' // Set a custom max-width to make it larger\n    });\n    \n    $(document).off('click', '.receipt-link').on('click', '.receipt-link', function(e) {\n    e.preventDefault(); // Prevent default action of <a> tag\n\n    const receiptId = $(this).data('receipt-id');\n    console.log('Receipt ID clicked:', receiptId);\n    open_receipt_details_dialog(receiptId);\n    \n});\n\nfunction open_receipt_details_dialog(receiptId) {\n    try {\n        const receiptDetailsDialog = new frappe.ui.Dialog({\n            title: __('Receipt Details'),\n            size: \"large\",\n            fields: [\n                {\n                    label: 'Receipt Details',\n                    fieldname: 'receipt_details',\n                    fieldtype: 'HTML',\n                    options: `\n                        <table class=\"table table-bordered\" style=\"border-color: #000000; font-size:14px;\">\n                            <thead style=\"background-color:#DFDFDF;text-align: top;\">\n                                <tr>\n                                    <th>No.</th>\n                                    <th>Customer</th>\n                                    <th>Reference Type</th>\n                                    <th>Reference Name</th>\n                                    <th>Outstanding Amount</th>\n                                    <th>Allocated Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody class=\"receipt-table-body\"></tbody>\n                        </table>\n                        <div class=\"remark-container\" style=\"margin-top: 10px; display: none;\">\n                            <label><strong>Remarks:</strong></label>\n                            <p class=\"remark-text\" style=\"background-color: #fffacf; padding: 8px; border: 1px solid #ccc; border-radius:8px;\"></p>\n                        </div>\n                    `\n                }\n            ]\n        });\n\n        receiptDetailsDialog.show();\n        receiptDetailsDialog.$wrapper.find('.modal-dialog').css({\n            'width': '80%',\n            'max-width': '900px'\n        });\n\n        // Fetch receipt details\n        frappe.call({\n            method: \"sil.services.receipt_information_api.getAllReceiptInfoDetailsByReceiptNo\",\n            args: {\n                receipt_number: receiptId\n            },\n            callback: function (response) {\n                if (response.message?.receipt_information?.[0]?.receipt_entries) {\n                    const receiptEntries = response.message.receipt_information[0].receipt_entries;\n                    const rootElement = receiptDetailsDialog.$wrapper[0];\n                    const tableBody = rootElement.querySelector('.receipt-table-body');\n\n                    if (tableBody) {\n                        tableBody.innerHTML = ''; // Clear existing content\n\n                        receiptEntries.forEach(entry => {\n                            const rowHtml = `\n                                <tr>\n                                    <td><div style=\"white-space: nowrap;\">${entry.idx}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.customer || ''}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.reference_type || ''}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.reference_name || ''}</div></td>\n                                    <td><div style=\"white-space: nowrap; text-align: right;\">${formatDecimal(entry.outstanding_amount)}</div></td>\n                                    <td><div style=\"white-space: nowrap; text-align: right;\">${formatDecimal(entry.allocated_amount)}</div></td>\n                                </tr>\n                            `;\n                            tableBody.insertAdjacentHTML('beforeend', rowHtml);\n                        });\n                    }\n                } else {\n                    frappe.msgprint(__('No receipt details found.'));\n                }\n            },\n            error: function (err) {\n                console.error(\"API call failed:\", err);\n                frappe.msgprint(__('Failed to fetch receipt details.'));\n            }\n        });\n\n        // Fetch Employee Liability status and Remark\nfrappe.call({\n    method: \"frappe.client.get_value\",\n    args: {\n        doctype: \"Payment Intimation\",\n        filters: { name: receiptId },\n        fieldname: [\"custom_is_employee_liability\", \"remark\"]\n    },\n    callback: function (response) {\n        if (response.message && response.message.custom_is_employee_liability) {\n            const remarkContainer = receiptDetailsDialog.$wrapper[0].querySelector('.remark-container');\n            const remarkText = remarkContainer.querySelector('.remark-text');\n\n            if (response.message.remark) {\n                remarkContainer.style.display = \"block\"; // Show remark block\n\n                // Trim the remark text to remove any extra spaces around the string\n                let remark = response.message.remark.trim();\n\n                // Split the remark by '₹' to isolate amounts\n                const remarkParts = remark.split('₹');\n\n                // Clear existing remark text\n                remarkText.innerHTML = '';\n\n                // Add each part as a separate paragraph\n                remarkParts.forEach((part, index) => {\n                    if (part.trim()) {\n                        remarkText.innerHTML += `\n                            <div style=\"margin: 2px 0;\">₹${part.trim()}</div>\n                        `;\n                    }\n                });\n            }\n        }\n    }\n});\n\n    } catch (e) {\n        console.error('Error in open_receipt_details_dialog:', e);\n        frappe.msgprint(__('An error occurred while opening the receipt details dialog.'));\n    }\n}\n\n\n\nfunction open_remark_dialog(actionName, frm, dialog) {\n    let remarkDialog = null;\n    \n    // Get the selected receipt number\n    const selectedReceipt = $('.receipt-table1:checked').closest('tr').find('.receipt-number').text();\n\n    // Check if a receipt is selected\n    if (!selectedReceipt) {\n        frappe.msgprint(__('Please select a receipt.'));\n        return;\n    }\n\n    // Check if the dialog already exists\n    if (remarkDialog) {\n        remarkDialog.show();\n        return;\n    }\n\n    remarkDialog = new frappe.ui.Dialog({\n        title: `${actionName} - Add Remark`,\n        fields: [\n            {\n                label: 'Remark',\n                fieldname: 'remark',\n                fieldtype: 'Small Text',\n                placeholder: `Enter your remark for ${actionName}`\n            }\n        ],\n        primary_action_label: 'Submit',\n        primary_action: function() {\n            const remark = remarkDialog.get_value('remark');\n            rejectReceiptIntimation(frm, remarkDialog, selectedReceipt, remark);\n            remarkDialog.hide();\n            remarkDialog = null;  // Clear the dialog reference\n        }\n    });\n    remarkDialog.show();\n}\n}\n\nfunction open_suspense_dialog() {\n    try {\n        // Initialize the Frappe dialog\n        const suspenseDialog = new frappe.ui.Dialog({\n            title: __('Suspense Details (Debitor)'),\n            size: \"large\",\n            fields: [\n                {\n                    label: 'Suspense Receipts',\n                    fieldname: 'suspense_receipts',\n                    fieldtype: 'HTML',\n                    options: `\n                        <div style=\"display: flex; justify-content: space-between; \">\n                            <div style=\"width: 100%; padding-right: 2%;\"> <!-- Set width to 100% -->\n                                <div class=\"table-wrapper\" style=\"overflow: auto; max-height: 60vh;\"> <!-- Added max-height for vertical scroll -->\n                                    <table class=\"table table-bordered receipt-table\" style=\"border-radius: 8px; width: 100%; overflow: hidden; font-size:12px;\">\n                                        <thead>\n                                            <tr style=\"background-color: grey; color: white;\">\n                                                <th>Receipt ID</th>\n                                                <th>Executive</th>\n                                                <th>Deposit Date</th>\n                                                <th>Payment Mode</th>\n                                                <th>Ref. No.</th>\n                                                <th>Ref. Date</th>\n                                                <th>Amount</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody class=\"receipt-table-body\">\n                                            <!-- Placeholder for rows -->\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    `\n                }\n            ]\n        });\n\n        // Show the dialog\n        suspenseDialog.show();\n        suspenseDialog.$wrapper.find('.modal-dialog').css({\n            'width': 'auto;',\n            'max-width': '1200px'\n        });\n\n        // Fetch suspense entries from the API\n        frappe.call({\n            method: \"sil.services.payment_receipt_api.getSuspenseEntries\",\n            callback: function (response) {\n                if (response.message && response.message.length > 0) {\n                    const rootElement = suspenseDialog.$wrapper[0];\n                    const tableBody = rootElement.querySelector('.receipt-table-body');\n                    \n                    if (tableBody) {\n                        // Loop through the API response and populate the table\n                        response.message.forEach(entry => {\n                            const rowHtml = `\n                                <tr>\n                                    <td><div style=\"white-space: nowrap;\">${entry.receipt_id_1}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.executive}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.date}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.mode_of_payment}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.reference_number_1 || '-'}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.reference_date_1 || '-'}</div></td>\n                                    <td><div style=\"white-space: nowrap; text-align:right;\">${formatDecimal(entry.amount_1)}</div></td>\n                                </tr>\n                            `;\n                            tableBody.insertAdjacentHTML('beforeend', rowHtml);\n                        });\n                    }\n                }\n            },\n            error: function (err) {\n                console.error(\"API call failed:\", err);\n            }\n        });\n    } catch (e) {\n        console.error('Error in open_suspense_dialog:', e);\n    }\n}\n\nfunction get_receipt_information(frm, selected_receipts) {\n    console.log(\"get_receipt_information selectedReceipts :\",selected_receipts)\n    frappe.call({\n        method: 'sil.services.receipt_information_api.getAllReceiptInfoDetailsByReceiptNo',\n        args: { receipt_number: selected_receipts},\n        callback: function(r) {\n           if (r.message && r.message.receipt_information && r.message.receipt_information.length) {\n                populateFormFields(frm, r.message.receipt_information);\n            }else {\n                frappe.msgprint(__('No receipt information found for the selected receipt numbers.'));\n            }\n        },\n        error: function() {\n            frappe.msgprint(__('An error occurred while fetching receipt information.'));\n        }\n    });\n}\n\nfunction moveToJournal(frm, dialog, selectedReceipts) {\n    if (selectedReceipts && selectedReceipts.length > 0) {\n        console.log('function moveToJournal:', selectedReceipts);\n\n        // Return the promise from frappe.call\n        return frappe.call({\n            method: 'sil.services.payment_info_journal_entry_api.MovePaymentInfoForJournalEntry',\n            args: {\n                receipt_no: selectedReceipts\n            },\n            callback: function (r) {\n                console.log('Server Response:', r);\n\n                if (r.message && r.message.status === \"success\") {\n                    frappe.msgprint({\n                        title: __('Action Completed'),\n                        message: `Successfully moved the receipt [${selectedReceipts}] to Journal Entry.`,\n                        indicator: 'blue'\n                    });\n                    console.log(`Receipts moved to journal entry: [${selectedReceipts}]`);\n\n                    // Optionally refresh the dialog or perform other UI updates\n                    dialog.refresh();\n                } else if (r.message && r.message.status === \"error\") {\n                    frappe.msgprint({\n                        title: __('Action Failed'),\n                        message: `Failed to move receipt(s) [${selectedReceipts}]: ${r.message.error}`,\n                        indicator: 'red'\n                    });\n                    console.error(`Error while moving receipts: ${r.message.error}`);\n                } else {\n                    frappe.msgprint({\n                        title: __('No Action Taken'),\n                        message: __('No data was updated. Please check the receipt numbers.'),\n                        indicator: 'orange'\n                    });\n                    console.warn('No data was updated for the selected receipts.');\n                }\n            },\n            error: function (err) {\n                console.error('Error while calling the server method:', err);\n                frappe.msgprint({\n                    title: __('Server Error'),\n                    message: __('An error occurred while processing the request. Please try again later.'),\n                    indicator: 'red'\n                });\n            }\n        });\n    } else {\n        console.warn('No receipts selected by the user.');\n        frappe.msgprint({\n            title: __('No Receipt Selected'),\n            message: __('Please select at least one receipt to move to journal entry.'),\n            indicator: 'orange'\n        });\n    }\n}\n\n\n\nfunction rejectReceiptIntimation(frm, dialog, selectedReceipt, remark_entry) {\n    \n    if (selectedReceipt) {\n        console.log('Selected Receipt:', selectedReceipt);\n        console.log('Remark Entry:', remark_entry);\n        \n        frappe.call({\n            method: 'sil.services.payment_receipt_api.UpdateRejectionForPaymentReceipt',\n            args: {\n                receipt_no: selectedReceipt,  // passing single receipt number\n                remark: remark_entry\n            },\n            callback: function (r) {\n                console.log('Server Response:', r);\n                if (r.message && r.message.status === \"success\") {\n                    frappe.msgprint({\n                        title: __('Action Completed'),\n                        message: `Rejected successfully with remark: ${remark_entry}`,\n                        indicator: 'blue'\n                    });\n                    console.log(`Receipt rejected successfully: ${selectedReceipt} with remark: \"${remark_entry}\"`);\n                    // Optionally refresh the dialog or UI elements\n                    dialog.hide();\n                    frm.refresh();\n                } else if (r.message && r.message.status === \"error\") {\n                    frappe.msgprint({\n                        title: __('Action Failed'),\n                        message: `Failed to reject receipt ${selectedReceipt}: ${r.message.error}`,\n                        indicator: 'red'\n                    });\n                    console.error(`Error while rejecting receipt: ${r.message.error}`);\n                } else {\n                    frappe.msgprint({\n                        title: __('No Action Taken'),\n                        message: __('No data was updated. Please check the receipt number.'),\n                        indicator: 'orange'\n                    });\n                    console.warn('No data was updated for the selected receipt.');\n                }\n            },\n            error: function (err) {\n                console.error('Error while calling the server method:', err);\n                frappe.msgprint({\n                    title: __('Server Error'),\n                    message: __('An error occurred while processing the request. Please try again later.'),\n                    indicator: 'red'\n                });\n            }\n        });\n    } else {\n        console.warn('No receipt selected by the user.');\n        frappe.msgprint({\n            title: __('No Receipt Selected'),\n            message: __('Please select a receipt to reject.'),\n            indicator: 'orange'\n        });\n    }\n}\n\n\nfunction handleGetAction(dialog, frm, selectedReceipts) {\n    try {\n        console.log(\"handleGetAction selectedReceipts :\",selectedReceipts)\n        if (selectedReceipts) {\n            get_receipt_information(frm, selectedReceipts);\n        }\n\n        if (selectedReceipts.length > 0) {\n            // Unhide the 'customer' and 'receipt_number' fields only when data exists\n            frm.set_df_property('customer_name', 'hidden', 0); // Unhide customer field\n            frm.set_df_property('receipt_number', 'hidden', 0); // Unhide receipt number field\n            frm.set_df_property('custom_payment_intimation_receipt_no', 'hidden', 0); // Unhide custom_payment_intimation_receipt_no field\n        }\n\n        dialog.hide();\n\n        // Handle changes for filter fields to update dependent dropdowns\n        dialog.fields_dict.executive.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.date.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.amount.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.payment_mode.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.customer.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.show();\n        fetch_filter_options(dialog);\n\n    } catch (error) {\n        console.error('Error during primary action:', error);\n    }\n}\n\nfunction addCheckboxValidation(selector, selectedReceipts) {\n    // Remove any existing event listeners to prevent duplicates\n    $(document).off('change', selector).on('change', selector, function () {\n        const receiptNumber = $(this).val();\n        if ($(this).is(':checked')) {\n            // Uncheck all other checkboxes in the same group\n            $(selector).not(this).prop('checked', false);\n            // Clear the array and add only the selected receipt\n            selectedReceipts.length = 0;\n            selectedReceipts.push(receiptNumber);\n        } else {\n            // If unchecked, clear the array\n            selectedReceipts.length = 0;\n        }\n        console.log(\"function addCheckboxValidation:\", selectedReceipts);\n    });\n}\n\nfunction populateFormFields(frm, receipt_information) {\n    console.log(\"API Response:\", receipt_information); // Log the full API response\n\n    receipt_information.forEach(receipt => {\n        frm.set_value('mode_of_payment', receipt.mode_of_payment || '');\n        frm.set_value('executive', receipt.executive || '');\n        frm.set_value('bank_account', receipt.bank_account || '');\n        frm.set_value('account_paid_to', receipt.account_paid_to || '');\n        frm.set_value('receipt_number', receipt.name || '');\n        frm.set_value('custom_payment_intimation_receipt_no', receipt.name || '');\n        frm.set_value('customer_name', receipt.custom_customer || '');\n        frm.set_value('date', frappe.datetime.nowdate());\n        frm.set_value('amount_paid', receipt.amount || 0);\n        frm.set_value('amount_received', receipt.amount || 0);\n        frm.set_value('reference_number', receipt.chequereference_number || null);\n        frm.set_value('chequereference_date', receipt.reference_no || null);\n        frm.set_value('account_paid_from', receipt.account_paid_from || null);\n        frm.set_value('reference_image', receipt.reference_image || null);\n        frm.set_value('custom_info_remarks', receipt.remark || null);\n        frm.set_value('payment_type', \"Receive\");\n        frm.set_value('custom_slip_no', receipt.custom_slip_no || null);\n        frm.set_value('custom_employee_advance_amount', receipt.custom_employee_advance_amount || null);\n\n        // Set the parent's custom_is_employee_liability value\n        frm.set_value('custom_is_employee_liability', receipt.custom_is_employee_liability || 0);\n\n        console.log(\"Updated Form Fields:\", frm.doc); // Log the current form values\n\n        if (receipt.name) {\n            frm.set_df_property('receipt_number', 'hidden', 1);\n            frm.set_df_property('custom_payment_intimation_receipt_no', 'hidden', 0);\n        } else {\n            frm.set_df_property('receipt_number', 'hidden', 1);\n            frm.set_df_property('custom_payment_intimation_receipt_no', 'hidden', 1);\n        }\n\n        if (receipt.customer) {\n            frm.set_df_property('customer_name', 'hidden', 0);\n        } else {\n            frm.set_df_property('customer_name', 'hidden', 1);\n        }\n\n        if (receipt.receipt_entries) {\n            frm.clear_table('payment_entry_details');\n\n            receipt.receipt_entries.forEach(entry => {\n                let child = frm.add_child('payment_entry_details');\n                \n                Object.assign(child, {\n                    customer: entry.customer || '',\n                    reference_type: entry.reference_type || '',\n                    reference_name: entry.reference_name || '',\n                    outstanding_amount: entry.outstanding_amount || 0,\n                    allocated_amount: entry.allocated_amount || 0,\n                    custom_is_employee_liability: receipt.custom_is_employee_liability || 0 // Use parent's value\n                });\n\n                console.log(\"Child Row:\", child); // Log each child entry for debugging\n            });\n\n            frm.refresh_field('payment_entry_details');\n        }\n\n        frm.set_df_property('payment_entry_details', 'read_only', 1);\n    });\n\n    console.log(\"Final Form State:\", frm.doc); // Log final form state after updates\n}\n  function fetch_filter_options(dialog) {\n        frappe.call({\n            method: 'sil.services.receipt_information_api.get_filter_options',\n            args: {\n                all: dialog.get_value('all') ? 1 : 0,\n                executive: dialog.get_value('executive') || '',\n                deposit_date: dialog.get_value('date') || '',\n                deposit_amount: dialog.get_value('amount') || ''\n            },\n            callback: function (r) {\n                try {\n                    if (r.message) {\n                        const { executives, dates, amounts, payment_mode, customer } = r.message;\n\n                        dialog.set_df_property('executive', 'options', executives);\n                        dialog.set_df_property('date', 'options', dates);\n                        dialog.set_df_property('amount', 'options', amounts);\n                        dialog.set_df_property('payment_mode', 'options', payment_mode);\n                        dialog.set_df_property('customer', 'options', customer);\n                    } else {\n                        frappe.msgprint(__('No data available for filtering.'));\n                    }\n                } catch (error) {\n                    console.error('Error in callback of fetch_filter_options:', error);\n                }\n            },\n            error: function (err) {\n                console.error('Error fetching filter options:', err);\n                frappe.msgprint(__('An error occurred while fetching filter options.'));\n            }\n        });\n    }\n\n\nfunction toggleFieldsVisibility(frm) {\n    const paymentType = frm.doc.payment_type;\n\n    // Check if payment_type is \"Internal Transfer\"\n    if (paymentType === 'Internal Transfer') {\n        frm.clear_table('payment_entry_details');\n        // Hide the receipt_number, customer_name fields, and payment_entry_details table\n        frm.set_df_property('receipt_number', 'hidden', 1);\n        frm.set_df_property('customer_name', 'hidden', 1);\n        frm.set_df_property('payment_entry_details', 'hidden', 1); // Hide payment entry details\n        frm.get_field('payment_entry_details').$wrapper.hide(); // Also hide the table visually\n        frm.add_custom_button(__('Get Receipt Information'), function () {\n            frappe.msgprint(__('Receipt information is not available for Internal Transfer.'));\n        }).prop('disabled', true); // Disable the button\n    } else {\n        // If payment_type is not \"Internal Transfer\", show the fields and button\n        frm.set_df_property('receipt_number', 'hidden', 0); // Unhide receipt_number\n        frm.set_df_property('customer_name', 'hidden', 0); // Unhide customer_name\n        frm.set_df_property('payment_entry_details', 'hidden', 0); // Unhide payment_entry_details\n        frm.get_field('payment_entry_details').$wrapper.show(); // Show the table\n        frm.add_custom_button(__('Get Receipt Information'), function () {\n            try {\n                open_filter_dialog(frm);\n            } catch (error) {\n                console.error('Error in refresh function:', error);\n                frappe.msgprint(__('An unexpected error occurred while opening the filter dialog.'));\n            }\n        }).prop('disabled', false); // Enable the button\n    }\n}\n\nfunction open_receipt_details_dialog(receiptId) {\n    try {\n        // Initialize the Frappe dialog\n        const receiptDetailsDialog = new frappe.ui.Dialog({\n            title: __('Receipt Details'),\n            size: \"small\",\n            fields: [\n                {\n                    label: 'Receipt Details',\n                    fieldname: 'receipt_details',\n                    fieldtype: 'HTML',\n                    options: `\n                        <table class=\"table table-bordered table-text\">\n                            <thead>\n                                <tr>\n                                    <th>No.</th>\n                                    <th>Customer</th>\n                                    <th>Reference Type</th>\n                                    <th>Reference Name</th>\n                                    <th>Outstanding Amount</th>\n                                    <th>Allocated Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody class=\"receipt-table-body\">\n                                <!-- Dynamically populated rows -->\n                            </tbody>\n                        </table>\n                    `\n                }\n            ]\n        });\n\n        // Show the dialog\n        receiptDetailsDialog.show();\n        receiptDetailsDialog.$wrapper.find('.modal-dialog').css({\n            'width': '80%',\n            'max-width': '580px'\n        });\n\n        // Fetch receipt details entries from the API\n        frappe.call({\n            method: \"sil.services.receipt_information_api.getAllReceiptInfoDetailsByReceiptNo\",\n            args: {\n                receipt_id: receiptId // Pass the receipt ID to the API\n            },\n            callback: function (response) {\n                if (response.message && response.message.receipt_information.length > 0) {\n                    const receiptEntries = response.message.receipt_information[0].receipt_entries; // Get the receipt entries\n                    const rootElement = receiptDetailsDialog.$wrapper[0];\n                    const tableBody = rootElement.querySelector('.receipt-table-body');\n                    \n                    if (tableBody) {\n                        // Loop through the API response and populate the table\n                        receiptEntries.forEach(entry => {\n                            const rowHtml = `\n                                <tr>\n                                    <td><div style=\"white-space: nowrap;\">${entry.idx}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.customer}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.reference_type}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.reference_name}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.outstanding_amount}</div></td>\n                                    <td><div style=\"white-space: nowrap;\">${entry.allocated_amount}</div></td>\n                                </tr>\n                            `;\n                            tableBody.insertAdjacentHTML('beforeend', rowHtml); // Add rows dynamically\n                        });\n                    }\n                } else {\n                    frappe.msgprint(__('No receipt details found.'));\n                }\n            },\n            error: function (err) {\n                console.error(\"API call failed:\", err);\n                frappe.msgprint(__('Failed to fetch receipt details.'));\n            }\n        });\n\n    } catch (e) {\n        console.error('Error in open_receipt_details_dialog:', e);\n        frappe.msgprint(__('An error occurred while opening the receipt details dialog.'));\n    }\n}\n\n\n// CSS to fix table layout and prevent receipt number overflow, and align Payment Mode, Deposit Date, and Amount inline\nfrappe.ui.form.on('Payment Receipt', {\n    refresh: function(frm) {\n$(\"<style>\")\n    .prop(\"type\", \"text/css\")\n    .html(`\n        /* Style the modal container */\n        .dialog {\n            border-radius: 8px;\n            overflow: hidden;\n            width: 80% !important;\n        }\n\n        /* Style the modal footer to align buttons closer */\n        .modal-footer {\n            display: flex;\n            justify-content: flex-start; /* Align buttons to the left */\n            gap: 10px; /* Add a small gap between the buttons */\n        }\n\n        /* Make the buttons appear inline with minimal spacing */\n        .modal-footer .btn {\n            margin: 0; /* Remove the default margin */\n            padding: 8px 16px; /* Ensure buttons have consistent padding */\n            display: inline-block; /* Ensure they stay in line */\n        }\n\n        /* Optional: Style the buttons for better appearance */\n        .modal-footer .btn-dark {\n            background-color: black;\n            color: white !important;\n            border: none !important;\n            border-radius: 8px;\n        }\n\n        .modal-footer .btn-dark:hover {\n            background-color: #333 !important; /* Darker shade on hover */\n        }\n\n        /* Table layout adjustments for fixed width */\n        .dialog .table {\n            table-layout: fixed !important;  /* Fixed table layout */\n            width: 100% !important;          /* Ensure table fits within dialog width */\n            overflow: hidden !important;     /* Prevent content overflow */\n            border-radius: 8px;             /* Rounded corners for table */\n        }\n\n        /* Apply border-radius to each column in the table */\n        .dialog .table th, .dialog .table td {\n            padding: 8px !important;        /* Add padding for better readability */\n            text-align: left !important;     /* Left-align the text */\n        }\n\n        /* Prevent wrapping and set max width for Receipt Number column */\n        .receipt-number {\n            white-space: nowrap !important;  /* Prevent line break */\n            overflow: hidden !important;\n            text-overflow: ellipsis;        /* Optionally add ellipsis if too long */\n            max-width: 150px;               /* Set max width for the receipt number */\n        }\n\n        /* Adjust table column widths */\n        .dialog .table th, .dialog .table td {\n            padding: 8px !important;        /* Add padding for better readability */\n            text-align: left !important;     /* Left-align the text */\n        }\n\n        /* Align Payment Mode, Deposit Date, and Amount inline */\n        .dialog .form-section {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: space-between;\n        }\n\n        .dialog .form-section .form-field {\n            margin-right: 15px;\n            margin-bottom: 10px;\n            flex: 1 1 30%; /* Allow fields to grow and fill available space, set a minimum width for each */\n        }\n\n        .dialog .form-section .form-field label {\n            white-space: nowrap;\n        }\n\n        .dialog .form-section .form-field .input-with-feedback {\n            width: 100%;\n        }\n        \n        .table-wrapper {\n            max-height: 65vh; /* Limit table height */\n            overflow-y: auto; /* Enable vertical scrolling */\n            overflow-x: auto; /* Enable horizontal scrolling */\n            white-space: nowrap; /* Prevent table cells from wrapping */\n        }\n        \n        .custom-button-container {\n            display: flex;\n            justify-content: flex-end;\n            gap: 10px; /* Space between buttons */\n            margin-top: 20px;\n        }\n        \n        .custom-button-container .btn {\n            min-width: 100px; /* Set a smaller button width */\n        }\n    `)\n    .appendTo(\"head\");\n\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Intimation",
  "enabled": 0,
  "modified": "2024-12-20 14:31:18.118363",
  "module": "sil",
  "name": "Account Paid To Filter",
  "script": "frappe.ui.form.on('Payment Intimation', {\n    mode_of_payment: function (frm) {\n        console.log('Mode of Payment changed:', frm.doc.mode_of_payment); // Log the selected value for debugging\n\n        frappe.call({\n            method: 'sil.services.payment_type_api.getAccountByPaymentType', // Replace with your server method\n            args: {\n                payment_type: frm.doc.mode_of_payment // Pass the selected mode of payment\n            },\n            callback: function (response) {\n                console.log('Server response:', response); // Log the server response for debugging\n\n                if (response.message && Array.isArray(response.message)) {\n                    try {\n                        // Extract the 'default_account' values from the response\n                        const accounts = response.message.map(item => item.name);\n                        console.log('Extracted accounts:', accounts); // Log the extracted accounts for debugging\n\n                        if (accounts.length > 0) {\n                            // Dynamically set a query for 'account_paid_to' field\n                            frm.set_query('account_paid_to', function () {\n                                return {\n                                    filters: {\n                                        name: ['in', accounts] // Restrict to the extracted accounts\n                                    }\n                                };\n                            });\n                            frm.refresh_field('account_paid_to');\n                            console.log('Query set for account_paid_to with accounts:', accounts);\n                        } else {\n                            frappe.msgprint(__('No accounts found for the selected mode of payment.'));\n                        }\n                    } catch (error) {\n                        console.error('Error while setting account query:', error);\n                        frappe.msgprint(__('An error occurred while updating account options. Please try again.'));\n                    }\n                } else {\n                    console.warn('No valid data received for mode_of_payment:', frm.doc.mode_of_payment);\n                    frappe.msgprint(__('No accounts found for the selected mode of payment.'));\n                }\n            },\n            error: function (err) {\n                console.error('Error during server call:', err); // Log the error for debugging\n                frappe.msgprint(__('Failed to fetch account details from the server. Please check the console for more information.'));\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2025-02-19 10:33:24.190549",
  "module": "sil",
  "name": "Populate Journal Entry From Payment Info",
  "script": "frappe.ui.form.on('Journal Entry', {\n    setup: function(frm) {\n        if (frm.is_new()) {\n            frm.clear_table('accounts');\n        }\n    },\n    refresh: function(frm) {\n        frm.add_custom_button('Get Receipts', function() {\n            show_receipt_selection_dialog(frm);\n        });\n    },\n});\n// Declare global variables to hold the receipt data\nlet table1_data = [];\nlet table2_data = [];\n\n\n// format amount decimal\nfunction formatDecimal(value) {\n    return parseFloat(value || 0).toFixed(2);\n}\n\nfunction show_receipt_selection_dialog(frm) {\n    frappe.call({\n        method: 'sil.services.payment_info_journal_entry_api.getAllReceiptDetailsForJournalEntry',\n        callback: function (r) {\n            if (r.message) {\n                table1_data = r.message.table1_data;\n                table2_data = r.message.table2_data;\n\n                if (!table1_data.length || !table2_data.length) {\n                    frappe.msgprint(__('No receipt data available.'));\n                    return;\n                }\n\n                // Extract unique executives and amounts from table1 only\n                const uniqueExecutives = new Set();\n                const uniqueAmounts = new Set();\n\n                table1_data.forEach(item => {\n                    uniqueExecutives.add(item.executive);\n                    uniqueAmounts.add(item.amount_1);\n                });\n\n                // Convert sets to arrays and sort them\n                const executiveOptions = Array.from(uniqueExecutives).sort();\n                const amountOptions = Array.from(uniqueAmounts).sort((a, b) => parseFloat(a) - parseFloat(b));\n\n                const dialog = new frappe.ui.Dialog({\n                    title: 'Select Receipts For Journal Entry',\n                    size: \"large\",\n                    fields: [\n                        {\n                            label: 'Filters',\n                            fieldname: 'filters',\n                            fieldtype: 'HTML',\n                            options: `\n                                <div class=\"form-group\">\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <label for=\"executive_filter\">Executive</label>\n                                            <select class=\"form-control\" id=\"executive_filter\">\n                                                <option value=\"\">Select Executive</option>\n                                                ${executiveOptions.map(executive => `<option value=\"${executive}\">${executive}</option>`).join('')}\n                                            </select>\n                                        </div>\n                                        \n                                        <div class=\"col-6\">\n                                            <label for=\"amount_filter\">Amount</label>\n                                            <select class=\"form-control\" id=\"amount_filter\">\n                                                <option value=\"\">Select Amount</option>\n                                                ${amountOptions.map(amount => `<option value=\"${amount}\">${formatDecimal(amount)}</option>`).join('')}\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n                            `\n                        },\n                        {\n                            label: 'Receipts',\n                            fieldname: 'receipts',\n                            fieldtype: 'HTML',\n                            options: `\n                                <div style=\"display: flex; justify-content: space-between;\">\n                                    <div style=\"width: 48%;\">\n                                        <strong>Suspense Details (Debitor)</strong>\n                                        <div class=\"table-responsive\">\n                                            <div class=\"table-wrapper\">\n                                                <table class=\"table table-bordered receipt-table\">\n                                                    <thead>\n                                                        <tr>\n                                                            <th style=\"width: 40px\"></th>\n                                                            <th>Receipt ID</th>\n                                                            <th>Executive</th>\n                                                            <th>Ref. No</th>\n                                                            <th>Ref. Date</th>\n                                                            <th>Amount</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody class=\"table1-body\">\n                                                        ${table1_data.map(item => `\n                                                            <tr>\n                                                                <td><input type=\"checkbox\" class=\"receipt-table1\" data-receipt-id=\"${item.receipt_id_1}\" data-amount=\"${item.amount_1}\" /></td>\n                                                                <td>${item.receipt_id_1}</td>\n                                                                <td class=\"executive-cell\">${item.executive}</td>\n                                                                <td>${item.reference_number_1}</td>\n                                                                <td>${item.reference_date_1}</td>\n                                                                <td>${formatDecimal(item.amount_1)}</td>\n                                                            </tr>\n                                                        `).join('')}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div style=\"width: 48%;\">\n                                        <strong>Payment Info Details (Creditor)</strong>\n                                        <div class=\"table-responsive\">\n                                            <div class=\"table-wrapper\">\n                                                <table class=\"table table-bordered receipt-table\">\n                                                    <thead>\n                                                        <tr>\n                                                            <th style=\"width: 40px\"></th>\n                                                            <th>Receipt ID</th>\n                                                            <th>Executive</th>\n                                                            <th>Ref. No</th>\n                                                            <th>Ref. Date</th>\n                                                            <th>Amount</th>\n                                                        </tr>\n                                                    </thead>\n                                                    <tbody class=\"table2-body\">\n                                                        ${table2_data.map(item => `\n                                                            <tr>\n                                                                <td><input type=\"checkbox\" class=\"receipt-table2\" data-receipt-id=\"${item.receipt_id_2}\" data-amount=\"${item.amount_2}\" /></td>\n                                                                <td>${item.receipt_id_2}</td>\n                                                                <td class=\"executive-cell\">${item.executive}</td>\n                                                                <td>${item.reference_number_2}</td>\n                                                                <td>${item.reference_date_2}</td>\n                                                                <td>${formatDecimal(item.amount_2)}</td>\n                                                            </tr>\n                                                        `).join('')}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            `\n                        },\n                        {\n                            fieldtype: 'Section Break'\n                        },\n                        {\n                            fieldtype: 'HTML',\n                            fieldname: 'button_container',\n                            options: `\n                                <div class=\"custom-button-container d-flex justify-content-end\">\n                                    <button class=\"btn btn-primary custom-get-button m-2\">Get Details</button>\n                                    <button class=\"btn btn-primary custom-approve-button m-2\">Remove From Journal</button>\n                                    <button class=\"btn btn-primary custom-reject-button m-2\">Reject</button>\n                                </div>\n                            `\n                        }\n                    ],\n                });\n\n                // Add custom CSS for table headers and border radius\n                $('<style>')\n                    .prop('type', 'text/css')\n                    .html(`\n                        .table-responsive {\n                            overflow-x: auto;\n                            width: 100%;\n                        }\n                        \n                        .table-wrapper {\n                            max-height: 65vh;\n                            overflow-y: auto;\n                        }\n\n                        .receipt-table {\n                            width: 100%;\n                            white-space: nowrap;\n                            margin-bottom: 0;\n                            font-size:12px;\n                        }\n\n                        .receipt-table thead {\n                            position: sticky;\n                            top: 0;\n                            background-color: #909090;\n                            color: white;\n                            z-index: 1;\n                        }\n\n                        .receipt-table th, .receipt-table td {\n                            padding: 8px;\n                            border: 1px solid #ddd;\n                        }\n                                td.executive-cell {\n                            overflow-wrap: break-word; /* Allows breaking only at spaces */\n                            word-wrap: break-word;     /* Ensures compatibility with older browsers */\n                            white-space: normal;       /* Allows text wrapping */\n                            \n                        }\n                    `)\n                    .appendTo('head');\n\n                dialog.show();\n                \n                // Set dialog size\n                dialog.$wrapper.find('.modal-dialog').css({\n                    'width': '95vw',\n                    'max-width': '95vw',\n                    'height': '95vh',\n                    'margin': '20px auto'\n                });\n\n                // Rest of your existing code...\n                addTable1CheckboxHandler();\n                \n                // Initialize filters\n                dialog.$wrapper.on('shown.bs.modal', function() {\n                    if ($('#executive_filter').length && $('#amount_filter').length) {\n                        $('#executive_filter, #amount_filter').off('change');\n                        $('#executive_filter, #amount_filter').on('change', function() {\n                            filterReceipts();\n                        });\n                    }\n                });\n\n                // Add checkbox validation\n                dialog.$wrapper.find('.modal-body').on('change', '.receipt-table1', function() {\n                    if ($(this).is(':checked')) {\n                        $('.receipt-table1').not(this).prop('checked', false);\n                    }\n                });\n\n                dialog.$wrapper.find('.modal-body').on('change', '.receipt-table2', function() {\n                    if ($(this).is(':checked')) {\n                        $('.receipt-table2').not(this).prop('checked', false);\n                    }\n                });\n\n                addCheckboxValidation('.receipt-table1');\n                addCheckboxValidation('.receipt-table2');\n\n                // Button click handlers\n                $(dialog.$body).on('click', '.custom-get-button', function() {\n                    frm.clear_table('accounts');\n                    get_details(frm, dialog);\n                });\n\n                $(dialog.$body).on('click', '.custom-reject-button', function() {\n                    open_remark_dialog('Remark for Rejection');\n                });\n\n                $(dialog.$body).on('click', '.custom-approve-button', function() {\n                    const selectedReceipt = $('input.receipt-table2:checked').data('receipt-id');\n                    if (!selectedReceipt) {\n                        frappe.msgprint(__('Please select a receipt'));\n                        return;\n                    }\n                    removeFromJournal(selectedReceipt);\n                    dialog.hide();\n                });\n            }\n        }\n    });\n}\n\nfunction addCheckboxValidation(selector) {\n    $(document).on('change', selector, function () {\n        if ($(this).is(':checked')) {\n            $(selector).not(this).prop('checked', false);\n        }\n    });\n}\n\nfunction get_details(frm,dialog) {\n    const selected_from_table_1 = [];\n    const selected_from_table_2 = [];\n\n    $('input.receipt-table1:checked').each(function () {\n        selected_from_table_1.push({\n            receipt_id: $(this).data('receipt-id'),\n            amount: $(this).data('amount')\n        });\n    });\n\n    $('input.receipt-table2:checked').each(function () {\n        selected_from_table_2.push({\n            receipt_id: $(this).data('receipt-id'),\n            amount: $(this).data('amount')\n        });\n    });\n\n    if (selected_from_table_1.length !== 1 || selected_from_table_2.length !== 1) {\n        frappe.msgprint(__('Please select exactly one entry from each table.'));\n        return;\n    }\n\n    // Ensure selected amounts are equal\n    // if (selected_from_table_1[0].amount !== selected_from_table_2[0].amount) {\n    //     frappe.msgprint(__('Amounts from both tables must be equal.'));\n    //     return;\n    // }\n    \n// Directly set the debitorAccountName to \"Debtors - SIL\"\nconst debitorAccountName = \"Debtors - SIL\";\nconsole.log('Debtor Account Name:', debitorAccountName);\n\n// Call server-side script\nfrappe.call({\n    method: 'sil.services.payment_info_journal_entry_api.getDetailsForSelectedReceipts',\n    args: {\n        receipt_1: selected_from_table_1[0],\n        receipt_2: selected_from_table_2[0]\n    },\n    callback: function (response) {\n        if (response.message) {\n            // Populate the response data into the Journal Entry form\n            let receipt_data = response.message;\n\n            // Process receipt_1 data\n            if (receipt_data.receipt_1 && receipt_data.receipt_1.table1_data) {\n                $.each(receipt_data.receipt_1.table1_data, function(index, row) {\n                    let child_row = frm.add_child('accounts'); // Add a row to the 'accounts' child table\n                    \n                    // Populate child table fields with receipt_1 data\n                    child_row.account = row.account_paid_to || row.account_paid_from; \n                    child_row.debit_in_account_currency = row.amount_paid || 0;\n                    child_row.credit_in_account_currency = 0; // Assuming debit is 0 for this data type\n                    child_row.mode_of_payment = row.mode_of_payment;\n                    child_row.customer = null; // Add customer data if available (for receipt_1, customer might not be relevant)\n                    child_row.reference_type = null;\n                    child_row.reference_name = null;\n                });\n            }\n\n            // Process receipt_2 data\n            if (receipt_data.receipt_2 && receipt_data.receipt_2.table2_data) {\n                $.each(receipt_data.receipt_2.table2_data, function(index, row) {\n                    let child_row = frm.add_child('accounts'); // Add a row to the 'accounts' child table\n                    \n                    // Populate child table fields with receipt_2 data\n                    child_row.account = debitorAccountName; // Use the fixed value \"Debtors - SIL\"\n                    child_row.debit_in_account_currency = 0; // Assuming credit is 0 for this data type\n                    child_row.credit_in_account_currency = row.allocated_amount || 0;\n                    child_row.mode_of_payment = \"Cash\"; // Assuming 'Cash' as default payment mode\n                    child_row.party_type = \"Customer\" || null; // Add customer data\n                    child_row.party = row.customer || null; // Add customer data\n                    child_row.reference_type = row.reference_type || null;\n                    if (row.reference_type != \"Slip No\") {\n                        child_row.reference_name = row.reference_name || null;\n                    } else {\n                        child_row.reference_name = null;\n                        child_row.slip_no = row.reference_name || null;\n                        child_row.is_advance = 'Yes';\n                    }\n                                        // Add Employee Liability Entry in the Same Table\n                    if (row.custom_is_employee_liability === 1) {\n                        let emp_liability_row = frm.add_child('accounts');\n\n                        emp_liability_row.account = \"Employee Advance - SIL\";\n                        emp_liability_row.debit_in_account_currency = 0;\n                        emp_liability_row.credit_in_account_currency = row.custom_employee_advance_amount || 0;\n                        emp_liability_row.mode_of_payment = null;\n                        emp_liability_row.party_type = \"Employee\";\n                        emp_liability_row.party = row.executive || null;\n                        emp_liability_row.reference_type = null;\n                        emp_liability_row.reference_name = null;\n                    }\n                    \n                });\n            }\n            \n        \n            \n            // Set custom fields\n            frm.set_value(\"custom_suspense_id\", receipt_data.receipt_1.receipt_id);\n            console.log(`Suspense table 1: ${receipt_data.receipt_1.receipt_id}`);\n\n            frm.set_value(\"custom_payment_info_id\", receipt_data.receipt_2.receipt_id);\n            console.log(`Debt table 1: ${receipt_data.receipt_2.receipt_id}`);\n            \n            // Refresh the child table to show the newly added rows\n            frm.refresh_field('accounts');\n            \n            frappe.msgprint(__('Receipt details updated successfully.'));\n            dialog.hide();\n        } else {\n            frappe.msgprint(__('Failed to process the selected receipts.'));\n        }\n    }\n});\n}\nfunction open_remark_dialog(actionName, frm, dialog) {\n    let remarkDialog = null;\n    \n    // Collect the selected receipt from table 2\n    const selectedReceipt = $('input.receipt-table2:checked').data('receipt-id');\n    \n    if (!selectedReceipt) {\n        frappe.msgprint(__('Please select a receipt to reject.'));\n        return;\n    }\n\n    if (remarkDialog) {\n        remarkDialog.show();\n        return;\n    }\n\n    remarkDialog = new frappe.ui.Dialog({\n        title: `${actionName}`,\n        fields: [\n            {\n                label: 'Remark',\n                fieldname: 'remark',\n                fieldtype: 'Small Text',\n                placeholder: 'Enter your remark'\n            }\n        ],\n        primary_action_label: 'Submit',\n        primary_action: function () {\n            const remark = remarkDialog.get_value('remark');\n            rejectReceiptIntimation(frm, remarkDialog, selectedReceipt, remark);\n\n            \n        }\n    });\n\n    remarkDialog.show();\n}\n\nfunction filterReceipts() {\n    const selectedExecutive = $('#executive_filter').val();\n    const selectedAmount = $('#amount_filter').val();\n\n    // Filter only table1 (suspense details) based on dropdown selections\n    let filteredTable1 = [...table1_data];\n    if (selectedExecutive) {\n        filteredTable1 = filteredTable1.filter(item => item.executive === selectedExecutive);\n    }\n    if (selectedAmount) {\n        filteredTable1 = filteredTable1.filter(item => parseFloat(item.amount_1) === parseFloat(selectedAmount));\n    }\n\n    // Render table1 with filtered data\n    renderTable('.table1-body', filteredTable1, 'table1');\n    // Render table2 with all data (unfiltered)\n    renderTable('.table2-body', table2_data, 'table2');\n}\n\n\n// Add checkbox change handler for table1\nfunction addTable1CheckboxHandler() {\n    $(document).on('change', '.receipt-table1', function() {\n        if ($(this).is(':checked')) {\n            // Uncheck other checkboxes in table1\n            $('.receipt-table1').not(this).prop('checked', false);\n            \n            // Get the selected row data\n            const row = $(this).closest('tr');\n            const referenceNumber = row.find('td:eq(3)').text().trim();\n            const referenceDate = row.find('td:eq(4)').text().trim();\n            const amount = parseFloat($(this).data('amount'));\n\n            let filteredTable2;\n            \n            // First attempt: Try filtering by reference number, date, and amount\n            if (referenceNumber && referenceNumber !== 'null' && \n                referenceDate && referenceDate !== 'null') {\n                \n                filteredTable2 = table2_data.filter(item => \n                    item.reference_number_2 === referenceNumber && \n                    item.reference_date_2 === referenceDate &&\n                    parseFloat(item.amount_2) === amount\n                );\n                \n                console.log('Attempting reference match:', {\n                    referenceNumber,\n                    referenceDate,\n                    amount,\n                    matchesFound: filteredTable2.length\n                });\n            }\n\n            // If no matches found with reference details, fall back to amount-only filtering\n            if (!filteredTable2 || filteredTable2.length === 0) {\n                console.log('No reference matches found, filtering by amount only');\n                filteredTable2 = table2_data.filter(item => \n                    parseFloat(item.amount_2) === amount\n                );\n                \n                if (filteredTable2.length > 0) {\n                    // Show an informative message about falling back to amount-based matching\n                    frappe.show_alert({\n                        message: __('No exact reference match found. Showing entries with matching amount.'),\n                        indicator: 'yellow'\n                    }, 5);\n                }\n            }\n\n            // If still no matches found, show an alert\n            if (filteredTable2.length === 0) {\n                frappe.msgprint(__('No matching entries found with the same amount.'));\n                $(this).prop('checked', false); // Uncheck the checkbox\n                renderTable('.table2-body', table2_data, 'table2'); // Show all data\n                return;\n            }\n\n            // Render filtered table2\n            renderTable('.table2-body', filteredTable2, 'table2');\n        } else {\n            // If unchecked, show all table2 data\n            renderTable('.table2-body', table2_data, 'table2');\n        }\n    });\n}\n\n// Helper function to safely check if a value is null/empty\nfunction isNullOrEmpty(value) {\n    return value === null || value === undefined || value.toString().trim() === '' || value === 'null';\n}\n\n// Add this new function to update dropdown options\nfunction updateDropdownOptions(selectedExecutive, selectedAmount) {\n    // Get unique values only from table1_data\n    const uniqueExecutives = new Set();\n    const uniqueAmounts = new Set();\n    \n    // Always use table1_data as the source for dropdown values\n    let filteredData = [...table1_data];\n    \n    // Apply existing filters when updating dropdowns\n    if (selectedExecutive) {\n        filteredData = filteredData.filter(item => item.executive === selectedExecutive);\n    }\n    if (selectedAmount) {\n        filteredData = filteredData.filter(item => parseFloat(item.amount_1) === parseFloat(selectedAmount));\n    }\n    \n    // Populate unique values from filtered data\n    filteredData.forEach(item => {\n        if (!selectedExecutive) uniqueExecutives.add(item.executive);\n        if (!selectedAmount) uniqueAmounts.add(item.amount_1);\n    });\n\n    // Update executive dropdown if not currently selected\n    if (!selectedExecutive) {\n        const executiveOptions = ['<option value=\"\">Select Executive</option>']\n            .concat(Array.from(uniqueExecutives)\n                .sort()\n                .map(executive => `<option value=\"${executive}\">${executive}</option>`));\n        $('#executive_filter').html(executiveOptions.join(''));\n    }\n\n    // Update amount dropdown if not currently selected\n    if (!selectedAmount) {\n        const amountOptions = ['<option value=\"\">Select Amount</option>']\n            .concat(Array.from(uniqueAmounts)\n                .sort((a, b) => parseFloat(a) - parseFloat(b))\n                .map(amount => `<option value=\"${amount}\">${amount}</option>`));\n        $('#amount_filter').html(amountOptions.join(''));\n    }\n}\n\nfunction renderTable(selector, data, tableType) {\n    const tableBody = $(selector);\n    \n    // Get the parent table\n    const table = tableBody.closest('table');\n    \n    // If this is the first render, store the initial width as a data attribute\n    if (!table.data('initial-width') && table.width() > 0) {\n        table.data('initial-width', table.width());\n    }\n    \n    // Get the stored initial width\n    const initialWidth = table.data('initial-width');\n    \n    tableBody.empty();\n    \n    data.forEach(item => {\n        const row = tableType === 'table1'\n            ? `\n                <tr>\n                    <td><input type=\"checkbox\" class=\"receipt-table1\" data-receipt-id=\"${item.receipt_id_1}\" data-amount=\"${item.amount_1}\" /></td>\n                    <td>${item.receipt_id_1}</td>\n                    <td class=\"executive-cell\">${item.executive}</td>\n                    <td>${item.reference_number_1}</td>\n                    <td>${item.reference_date_1}</td>\n                    <td>${formatDecimal(item.amount_1)}</td>\n                </tr>\n            `\n            : `\n                <tr>\n                    <td><input type=\"checkbox\" class=\"receipt-table2\" data-receipt-id=\"${item.receipt_id_2}\" data-amount=\"${item.amount_2}\" /></td>\n                    <td>${item.receipt_id_2}</td>\n                    <td class=\"executive-cell\">${item.executive}</td>\n                    <td>${item.reference_number_2}</td>\n                    <td>${item.reference_date_2}</td>\n                    <td>${formatDecimal(item.amount_2)}</td>\n                </tr>\n            `;\n        tableBody.append(row);\n    });\n\n    // Apply fixed width for table2\n    if (tableType === 'table2' && initialWidth) {\n        // Force the table width to stay constant\n        table.css({\n            'width': initialWidth,\n            'min-width': initialWidth,\n            'max-width': initialWidth\n        });\n    }\n\n    // Add or update CSS to maintain table stability\n    if (!document.getElementById('table-stability-styles')) {\n        $('<style>')\n            .prop('type', 'text/css')\n            .attr('id', 'table-stability-styles')\n            .html(`\n                table {\n                    table-layout: fixed !important;\n                }\n                td {\n                    white-space: nowrap;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                }\n                /* Prevent width changes on hover/selection */\n                tr:hover td, tr.selected td {\n                    width: auto !important;\n                }\n                /* Ensure checkbox column doesn't resize */\n                td:first-child {\n                    width: 30px !important;\n                    min-width: 30px !important;\n                    max-width: 30px !important;\n                }\n                /* Prevent selection from affecting layout */\n                input[type=\"checkbox\"] {\n                    margin: 0;\n                    padding: 0;\n                }\n            `)\n    \n        tableBody.append(row);\n    }\n\n}\n\nfunction rejectReceiptIntimation(frm, dialog, selectedReceipt, remark) {\n    if (!selectedReceipt || !remark) {\n        frappe.msgprint(__('Please select a receipt and provide a remark.'));\n        return;\n    }\n\n    // Call the server-side function for rejection\n    frappe.call({\n        method: 'sil.services.payment_info_journal_entry_api.UpdatePaymentInfoForRejection',\n        args: {\n            receipt_no: selectedReceipt,  // Pass the selected receipt ID\n            remark: remark\n        },\n        callback: function(response) {\n            if (response.message.status === \"success\") {\n                frappe.msgprint(response.message.message);\n                dialog.hide();  // Close the dialog on success\n            } else {\n                frappe.msgprint(__('An error occurred while rejecting the receipt.'));\n            }\n        }\n    });\n}\n\nfunction removeFromJournal(receipt_no) {\n    // Validate if the receipt number is provided\n    if (!receipt_no) {\n        frappe.msgprint(__('Please select a valid receipt.'));\n        return;\n    }\n\n    // Call the server-side method via frappe.call\n    frappe.call({\n        method: 'sil.services.payment_info_journal_entry_api.RemovePaymentInfoFromJournalEntry',  // Path to the server-side function\n        args: {\n            receipt_no: receipt_no  // Passing the receipt number to the server function\n        },\n        callback: function(response) {\n            if (response.message.status === 'success') {\n                // Show success message\n                frappe.msgprint(__('Receipt status updated successfully.'));\n            } else {\n                // Show error message\n                frappe.msgprint(__('Failed to update the receipt status.'));\n            }\n        },\n        error: function(error) {\n            // In case of error, show error message\n            frappe.msgprint(__('An error occurred while trying to update the receipt.'));\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Receipt",
  "enabled": 1,
  "modified": "2025-02-18 13:57:09.714239",
  "module": "sil",
  "name": "Populate Account Paid From Field",
  "script": "frappe.ui.form.on('Payment Receipt', {\n    custom_is_suspense_entry: function (frm) {\n        if (frm.doc.custom_is_suspense_entry) {\n            // Directly set the account_paid_to field to \"Suspense Account - SIL\"\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Account',\n                filters: {\n                    account_name: 'Suspense Account',\n                    company: frm.doc.company\n                },\n                fieldname: 'name'\n            },\n            callback: function (response) {\n                if (response.message && response.message.name) {\n                    let suspenseAccount = response.message.name;\n                    console.log('Suspense Account:', suspenseAccount);\n\n                    // Set it in a custom field or use as needed\n                    frm.set_value('account_paid_to', suspenseAccount);\n                }   else {\n                frappe.msgprint(__('No Suspense Account found for Debtors in this company.'));\n            ``}\n            }\n            })\n        } else {\n            // Clear the account_paid_to field if the checkbox is unchecked\n            console.log('Clearing account_paid_to...');\n            frm.set_value('account_paid_to', null);\n            frm.refresh_field('account_paid_to');\n        }\n    },\n    amount_paid: function(frm) {\n        if (cur_frm.doc.amount_paid) {\n            cur_frm.set_value('amount_received', cur_frm.doc.amount_paid);\n        }\n    }\n\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Receipt",
  "enabled": 1,
  "modified": "2025-01-21 10:09:41.050517",
  "module": "sil",
  "name": "Suspense Details Dialog",
  "script": "frappe.ui.form.on('Payment Receipt', {\n    refresh(frm) {\n        // Add a custom button to open the Suspense Details dialog\n        frm.add_custom_button(__('Open Suspense Details'), function () {\n            suspense_dialog();\n        });\n    }\n});\n\n//covert amount to decimal\nfunction formatDecimal(value) {\n    return parseFloat(value || 0).toFixed(2);\n}\n\nfunction suspense_dialog() {\n    const suspenseDialog = new frappe.ui.Dialog({\n        title: __('Suspense Details (Debitor)'),\n        size: \"large\",\n        fields: [\n            {\n                label: 'Suspense Details',\n                fieldname: 'suspense_details',\n                fieldtype: 'HTML',\n                options: `\n                    <div class=\"row g-3 mb-3\">\n                        <!-- First row with 3 columns -->\n                        <div class=\"col-lg-4 col-md-4 col-sm-6\">\n                            <label for=\"executive\" class=\"filter-label\">Executive</label>\n                            <select id=\"executive\" class=\"form-control\">\n                                <option value=\"\">Select Executive</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-4 col-md-4 col-sm-6\">\n                            <label for=\"deposit_date\" class=\"filter-label\">Deposit Date</label>\n                            <select id=\"deposit_date\" class=\"form-control\">\n                                <option value=\"\">Select Deposit Date</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-4 col-md-4 col-sm-6\">\n                            <label for=\"payment_mode\" class=\"filter-label\">Payment Mode</label>\n                            <select id=\"payment_mode\" class=\"form-control\">\n                                <option value=\"\">Select Payment Mode</option>\n                            </select>\n                        </div>\n                    </div>\n                    \n                    <div class=\"row g-3\">\n                        <!-- Second row with 3 columns -->\n                        <div class=\"col-lg-4 col-md-4 col-sm-6\">\n                            <label for=\"reference_no\" class=\"filter-label\">Reference No</label>\n                            <select id=\"reference_no\" class=\"form-control\">\n                                <option value=\"\">Select Reference No</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-4 col-md-4 col-sm-6\">\n                            <label for=\"reference_date\" class=\"filter-label\">Reference Date</label>\n                            <select id=\"reference_date\" class=\"form-control\">\n                                <option value=\"\">Select Reference Date</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-4 col-md-4 col-sm-6\">\n                            <label for=\"amount\" class=\"filter-label\">Amount</label>\n                            <select id=\"amount\" class=\"form-control\">\n                                <option value=\"\">Select Amount</option>\n                            </select>\n                        </div>\n                    </div>\n                `\n            },\n            { fieldtype: 'Section Break' },\n            {\n                label: 'Receipts',\n                fieldname: 'receipts',\n                fieldtype: 'HTML',\n                options: `\n                    <div style=\"padding: 10px;\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-bordered receipt-table\" style=\"border-radius:12px; overflow:hidden;\">\n                                <thead>\n                                    <tr style=\"background-color:grey; color:white;\">\n                                        <th>Receipt ID</th>\n                                        <th>Executive</th>\n                                        <th>Deposit Date</th>\n                                        <th>Payment Mode</th>\n                                        <th>Reference No</th>\n                                        <th>Reference Date</th>\n                                        <th>Amount</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"receipt-table-body\">\n                                    <!-- Rows will be dynamically inserted here -->\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                `\n            }\n        ]\n    });\n\n    // Show the dialog\n    suspenseDialog.show();\n\n    // Adjust dialog size\n    suspenseDialog.$wrapper.find('.modal-dialog').css({\n        'width': '80%',\n        'max-width': '1000px'\n        \n    });\n\n    // Fetch suspense entries from the API and populate the table\n    frappe.call({\n        method: \"sil.services.payment_receipt_api.getSuspenseEntries\",\n        callback: function (response) {\n            if (response.message && response.message.length > 0) {\n                const tableBody = suspenseDialog.$wrapper.find('#receipt-table-body');\n                const executiveDropdown = suspenseDialog.$wrapper.find('#executive');\n                const depositDateDropdown = suspenseDialog.$wrapper.find('#deposit_date');\n                const paymentModeDropdown = suspenseDialog.$wrapper.find('#payment_mode');\n                const referenceNoDropdown = suspenseDialog.$wrapper.find('#reference_no');\n                const referenceDateDropdown = suspenseDialog.$wrapper.find('#reference_date');\n                const amountDropdown = suspenseDialog.$wrapper.find('#amount');\n\n                const executiveOptions = new Set();\n                const depositDateOptions = new Set();\n                const paymentModeOptions = new Set();\n                const referenceNoOptions = new Set();\n                const referenceDateOptions = new Set();\n                const amountOptions = new Set();\n\n                // Loop through the API response and populate the table and filters\n                response.message.forEach(entry => {\n                    // Replace '-' with 'N/A' for display\n                    const referenceNo = entry.reference_number || '-';\n                    const referenceDate = entry.reference_date || '-';\n                    const amountReceived = formatDecimal(entry.amount_received) || '-';\n\n                    executiveOptions.add(entry.executive);\n                    depositDateOptions.add(entry.date);\n                    paymentModeOptions.add(entry.mode_of_payment);\n                    referenceNoOptions.add(entry.reference_number_1 || '-');\n                    referenceDateOptions.add(entry.reference_date_1 || '-');\n                    amountOptions.add(formatDecimal(entry.amount_1));\n\n                    // Add rows to the table with 'N/A' where applicable\n                    const rowHtml = `\n                        <tr class=\"receipt-row\">\n                            <td style=\" text-align:left; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;\">${entry.receipt_id_1}</td>\n                            <td style=\"text-align:left; overflow-wrap: break-word; word-wrap:break-word; white-space: normal; \">${entry.executive}</td>\n                            <td>${entry.date}</td>\n                            <td style=\"text-align:left\";>${entry.mode_of_payment}</td>\n                            <td style=\"text-align:left\";>${entry.reference_number_1 || '-'}</td>\n                            <td>${entry.reference_date_1 || '-'}</td>\n                            <td style=\"text-align: right;\">${formatDecimal(entry.amount_1)}</td>\n                        </tr>\n                    `;\n                    tableBody.append(rowHtml);\n                });\n\n                // Populate dropdowns with unique values\n                executiveOptions.forEach(option => executiveDropdown.append(`<option value=\"${option}\">${option}</option>`));\n                depositDateOptions.forEach(option => depositDateDropdown.append(`<option value=\"${option}\">${option}</option>`));\n                paymentModeOptions.forEach(option => paymentModeDropdown.append(`<option value=\"${option}\">${option}</option>`));\n                referenceNoOptions.forEach(option => referenceNoDropdown.append(`<option value=\"${option}\">${option}</option>`));\n                referenceDateOptions.forEach(option => referenceDateDropdown.append(`<option value=\"${option}\">${option}</option>`));\n                amountOptions.forEach(option => amountDropdown.append(`<option value=\"${option}\">${option}</option>`));\n\n                // Filter logic based on dropdown selection\n                const filterTable = () => {\n                    const selectedExecutive = executiveDropdown.val();\n                    const selectedDepositDate = depositDateDropdown.val();\n                    const selectedPaymentMode = paymentModeDropdown.val();\n                    const selectedReferenceNo = referenceNoDropdown.val();\n                    const selectedReferenceDate = referenceDateDropdown.val();\n                    const selectedAmount = amountDropdown.val();\n                \n                    tableBody.find('.receipt-row').each(function () {\n                        const row = $(this);\n                        const rowData = {\n                            executive: row.find('td').eq(1).text(),\n                            date: row.find('td').eq(2).text(),\n                            mode_of_payment: row.find('td').eq(3).text(),\n                            reference_number_1: row.find('td').eq(4).text(),\n                            reference_date_1: row.find('td').eq(5).text(),\n                            amount_1: row.find('td').eq(6).text()\n                        };\n\n\n                        // Show or hide row based on selected filters\n                       const isVisible = \n                            (!selectedExecutive || rowData.executive === selectedExecutive) &&\n                            (!selectedDepositDate || rowData.date === selectedDepositDate) &&\n                            (!selectedPaymentMode || rowData.mode_of_payment === selectedPaymentMode) &&\n                            (!selectedReferenceNo || rowData.reference_number_1 === selectedReferenceNo) &&\n                            (!selectedReferenceDate || rowData.reference_date_1 === selectedReferenceDate) &&\n                            (!selectedAmount || rowData.amount_1 === selectedAmount);\n\n                        row.toggle(isVisible);\n                    });\n                };\n\n                // Bind filter event to dropdowns\n                executiveDropdown.on('change', filterTable);\n                depositDateDropdown.on('change', filterTable);\n                paymentModeDropdown.on('change', filterTable);\n                referenceNoDropdown.on('change', filterTable);\n                referenceDateDropdown.on('change', filterTable);\n                amountDropdown.on('change', filterTable);\n            } else {\n                console.log(\"No suspense entries found.\");\n            }\n        },\n        error: function (err) {\n            console.error(\"API call failed:\", err);\n        }\n    });\n\n    // Add responsive CSS for the dialog content\n    const style = document.createElement('style');\n    style.innerHTML = `\n        .table th, .table td {\n            padding: 12px 15px;\n            text-align: center;\n        }\n        .receipt-table th, .receipt-table td {\n            \n            font-size:13px;\n            \n        }\n        .receipt-table thead {\n            position: sticky;\n            top: 0;                   /* Stick to the top of the table */\n            background-color: #909090; /* Grey background for readability */\n            color: white;             /* White text on grey background */\n            border-radius:12px;\n \n        }\n        .table-responsive {\n            max-height: 400px;\n            overflow-y: auto;\n            overflow-x: auto;\n        }\n        .table-hover tbody tr:hover {\n            background-color: #f1f1f1;\n        }\n        .form-control {\n            font-size: 13px;\n            color: #6c757d; /* Bootstrap's secondary text color */\n        }\n        .executive-row {\n            overflow-wrap: break-word; /* Allows breaking only at spaces */\n            word-wrap: break-word;     /* Ensures compatibility with older browsers */\n            white-space: normal;       /* Allows text wrapping */\n        }\n\n        /* Media Queries for responsiveness */\n        @media (max-width: 768px) {\n            .row {\n                display: block;\n            }\n        }\n    `;\n    document.head.appendChild(style);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2025-06-16 09:52:58.944247",
  "module": "Sil V2",
  "name": "Issue",
  "script": "frappe.ui.form.on('Issue', {\n    refresh(frm) {\n        // Always make issue status read-only\n        frm.set_df_property('custom_issue_status', 'read_only', 1);\n        frm.refresh_field('custom_issue_status');\n\n        // Apply color based on current value\n        style_custom_issue_status(frm);\n    },\n    \n    custom_item_serial_nos: function(frm){\n        if (frm.doc.custom_item_serial_nos) {\n            console.log(\"Hiii\")\n        frappe.call({\n            method: \"sil_v2.services.api.get_item_details_from_serial_no\",\n            args: {\n                serial_no: frm.doc.custom_item_serial_nos\n            },\n            callback: function(r) {\n                if (r.message) {\n                    let item_details = r.message\n                    frm.set_value('custom_item_classification', item_details.custom_item_classification);\n                    frm.set_value('custom_item', item_details.item);\n                    frm.set_value('custom_item_name', item_details.custom_item_name);\n                    frm.set_value('customer', item_details.customer);\n                    frm.set_value('custom_city_or_town', item_details.city_or_town);\n                    frm.set_value('custom_customer_address', item_details.full_address);\n                  \n\n                } else {\n                    frappe.msgprint(\"No Details found for this Serial No\");\n                }\n            }\n            \n        });\n    }\n    else{\n        const fields = [\"custom_item_classification\",\"custom_item\",\"custom_item_name\",\"customer\"]\n        for(let field of fields){\n            frm.set_value( field, \"\");\n        }\n    }\n    },\n    customer: function(frm) {\n        if (frm.doc.customer) {\n            frappe.call({\n                method: \"sil_v2.services.api.get_customer_addresses\",\n                args: {\n                    customer: frm.doc.customer\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        let address = r.message[0].full_address;\n                        frm.set_value('custom_customer_address', address);\n                        frm.set_value('custom_city_or_town', r.message[0].city_or_town);\n                          frm.refresh_field('custom_city_or_town');\n                        console.log(r.message[0].city_or_town)\n                        \n                    } else {\n                        frappe.msgprint(\"No address found for this customer.\");\n                    }\n                }\n            });\n        }\n        else{\n            frm.set_value('custom_customer_address', \"\");\n            frm.set_value('custom_city_or_town', \"\");\n        }\n    },\n    \n    \n    custom_service_status_: function (frm) {\n        // Sync logic when service status is changed\n        if (frm.doc.custom_service_status_ === 'Resolved') {\n            frm.set_value('custom_issue_status', 'Resolved');\n        }\n        else {\n            frm.set_value('custom_issue_status', 'Open');\n        }\n\n        // Refresh and apply styles\n        frm.refresh_field('custom_issue_status');\n        style_custom_issue_status(frm);\n    }\n});\n\nfunction style_custom_issue_status(frm) {\n    setTimeout(() => {\n        const field = frm.get_field('custom_issue_status');\n        if (field && field.$wrapper) {\n            const value = frm.doc.custom_issue_status;\n\n            // Default styling\n            let background = '#e8f0fe'; // fallback\n            if (value === 'Resolved') {\n                background = '#e6f4ea'; // pale green\n            }\n\n            field.$wrapper.find('.control-value').css({\n                'background-color': background,\n                'padding': '4px 8px',\n                'border-radius': '20px',\n                'width': 'fit-content',\n                'display': 'inline-block',\n                'color': 'black'\n            });\n        }\n    }, 100);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Test1",
  "enabled": 1,
  "modified": "2025-07-17 17:18:54.942988",
  "module": "Task Manager",
  "name": "Test1 CS",
  "script": "frappe.ui.form.on('Test1', {\n    \n    // Form refresh event\n    refresh(frm) {\n        let taskName = frm.doc.taskname;\n        let currStatus = frm.doc.taskstatus;\n        frm.set_value(\"tasknote\", `${taskName} is currently ${currStatus}`);\n    },\n\n    // Field change event for taskstatus\n    taskstatus(frm) {\n        let taskName = frm.doc.taskname;\n        let currStatus = frm.doc.taskstatus;\n        if (currStatus) {\n            frappe.show_alert({\n                message: __(\"Task status successfully updated to \" + currStatus),\n                indicator: 'blue'\n            }, 5);\n\n            frm.set_value(\"tasknote\", `${taskName} is currently ${currStatus}`);\n        }\n    },\n\n    // Field change event for due_date\n    due_date(frm) {\n        let selectDate = frm.doc.due_date;\n        let today = frappe.datetime.get_today();\n\n        if (selectDate && frappe.datetime.get_diff(selectDate, today) <= 0) {\n            frappe.msgprint(__(\"Please select an upcoming date!!!\"));\n\n            // Prevent loop/recursion\n            if (frm.doc.due_date) {\n                frm.set_value(\"due_date\", \"\");\n            }\n        }\n    }\n});\n",
  "view": "Form"
 }
]